<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Minno Suite â€“ Sequencer</title><link>/docs/sequencer/</link><description>Recent content in Sequencer on Minno Suite</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="/docs/sequencer/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Introduction</title><link>/docs/sequencer/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sequencer/introduction/</guid><description>
&lt;ul>
&lt;li>&lt;a href="#mixers">Mixers&lt;/a>&lt;/li>
&lt;li>&lt;a href="#inheritance">Inheritance&lt;/a>&lt;/li>
&lt;li>&lt;a href="#templates">Templates&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The sequencer is an overarching term for all of the features that allow you to dynamically change the flow of your tasks.
It has three critical components: The mixer, templating and inheritance.&lt;/p>
&lt;p>Throughout the sequencer documentation we will use &lt;a href="../../manager/tasks/messages">messages&lt;/a> as examples because they are the simplest element type.&lt;/p>
&lt;h3 id="mixers">Mixers&lt;/h3>
&lt;p>Each PI task is composed of a series of elements which are presented to the users sequentially
(i.e. trials for miTime, pages for miQuest and tasks for miManager).
The sequence &lt;a href="../mixer">&lt;strong>mixer&lt;/strong>&lt;/a> is responsible for the order that these elements are presented to the users.
It allows you to randomize the order of your elements.
It also allows you to repeat a task multiple times and randomly assign participants to experimental conditions.&lt;/p>
&lt;p>For example, the following mixer randomizes the order of two tasks in &lt;em>miManager&lt;/em>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000">API&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addSequence&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;randomize&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;message&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">template&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Task 1&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">keys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;message&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">template&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Task 2&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">keys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="inheritance">Inheritance&lt;/h3>
&lt;p>The element is the basic unit that is used across all tasks.
You can use the &lt;a href="../inheritance">inheritance&lt;/a> system in order to compose elements and base themselves one upon another, as well as grouping them into distinct sets.
This is useful both as a tool to improve the readability of you scripts (for instance keep code away from structure), and to allow another level of randomization and control.&lt;/p>
&lt;p>The following is an example of inheritance that improves the readability of a task sequence.
It uses a message defined within the &amp;ldquo;simpleMessage&amp;rdquo; &lt;code>set&lt;/code> as the base for the element within the sequence.
This allows the sequence to be less cluttered, and thus more readable.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000">API&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addTasksSet&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;simpleMessage&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;message&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">template&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Task 1&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">keys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]);&lt;/span>
&lt;span style="color:#000">API&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addSequence&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;simpleMessage&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="templates">Templates&lt;/h3>
&lt;p>Finally you have fine control down to the level of individual element properties using &lt;a href="../template">templates&lt;/a>.
Templates allow you to use &lt;a href="../variables">Environmental Variables&lt;/a> in order to customize you elements.&lt;/p>
&lt;p>The following code will display a message that says &amp;ldquo;Hello Randall Munroe&amp;rdquo;.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000">API&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addCurrent&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span>&lt;span style="color:#000">userName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Randall Munroe&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;span style="color:#000">API&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addSequence&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;message&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">template&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Hello &amp;lt;%= current.userName %&amp;gt;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">keys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Templates</title><link>/docs/sequencer/templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sequencer/templates/</guid><description>
&lt;p>One of the ways to create dynamic questionnaires is using templates.
Templates are a format that allows you to dynamically generate properties for your elements using the &lt;a href="../variables">environmental variables&lt;/a>.&lt;/p>
&lt;h3 id="syntax">Syntax&lt;/h3>
&lt;p>A template is formed as a string that has a section of the form &lt;code>&amp;lt;%= %&amp;gt;&lt;/code> in it.
Within these brackets you can inject any &lt;a href="../variables">environmental variables&lt;/a> that you like.
Environmental variables hold information that you set in advance or derive from the current or previous tasks,
you should really &lt;a href="../variables">read about them&lt;/a> before you advance any further.
For example: the following message task will print out &amp;ldquo;&lt;em>Hi Andy, this is an example for the use of templates&lt;/em>&amp;rdquo;.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000">API&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addGlobal&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span>
&lt;span style="color:#000">userName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Andy&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">task&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;message&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">template&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Hi &amp;lt;%= global.userName %&amp;gt;, this is an example for the use of templates&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">keys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39; &amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This example was an extremely simple use case.
Templates actually allow you to run any Javascript that you like, so they allow to do some really complex things.
We&amp;rsquo;ll give just one example of how you can make a simple condition within a template using a &lt;a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator">conditional operator&lt;/a>.
The player uses &lt;a href="http://lodash.com/docs#template">lodash templates&lt;/a> internally, you should look them up to see some of the more advanced uses.
The following message will read &amp;ldquo;&lt;em>Your name is Andy&lt;/em>&amp;rdquo; if userName actually equals Andy, and &amp;ldquo;&lt;em>Your name is not Andy&lt;/em>&amp;rdquo; otherwise.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">task&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;message&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">template&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Your name is &amp;lt;%= global.userName === &amp;#39;&lt;/span>&lt;span style="color:#000">Andy&lt;/span>&lt;span style="color:#4e9a06">&amp;#39; ? &amp;#39;&amp;#39; : &amp;#39;&lt;/span>&lt;span style="color:#000">not&lt;/span>&lt;span style="color:#4e9a06">&amp;#39; %&amp;gt; Andy&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">keys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39; &amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can replace any string setting in your elements with a template, and it will be rendered according to the &lt;a href="../variables">environmental variables&lt;/a>.
The exception to this rule are the &lt;code>inherit&lt;/code> and &lt;code>mixer&lt;/code> properties that cannot use templates.
The reason for this is the sequencers order of execution.
It first mixes, then inherits and only finally parses templates - so that the templating effect is not activated in time to be used for mixing or inheritance.&lt;/p>
&lt;h3 id="real-time-rerender">Real time (reRender)&lt;/h3>
&lt;p>Normaly each template gets rendered only once, when it is first encountered.
Sometimes you may want it to update in response to various realtime changes.
In order to for the templates to re-render each time you should set the &lt;code>reRender&lt;/code> property to be true.&lt;/p></description></item><item><title>Docs: Inheritance</title><link>/docs/sequencer/inheritance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sequencer/inheritance/</guid><description>
&lt;!-- START doctoc generated TOC please keep comment here to allow auto update -->
&lt;!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
&lt;ul>
&lt;li>&lt;a href="#overview">Overview&lt;/a>&lt;/li>
&lt;li>&lt;a href="#syntax">Syntax&lt;/a>&lt;/li>
&lt;li>&lt;a href="#sets">Sets&lt;/a>&lt;/li>
&lt;li>&lt;a href="#merging">Merging&lt;/a>&lt;/li>
&lt;li>&lt;a href="#type">Type&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#random">random:&lt;/a>&lt;/li>
&lt;li>&lt;a href="#exrandom">exRandom:&lt;/a>&lt;/li>
&lt;li>&lt;a href="#equaldistribution">equalDistribution:&lt;/a>&lt;/li>
&lt;li>&lt;a href="#sequential">sequential:&lt;/a>&lt;/li>
&lt;li>&lt;a href="#bydata">byData:&lt;/a>&lt;/li>
&lt;li>&lt;a href="#at">at:&lt;/a>&lt;/li>
&lt;li>&lt;a href="#first">first:&lt;/a>&lt;/li>
&lt;li>&lt;a href="#last">last:&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#seed">Seed&lt;/a>&lt;/li>
&lt;li>&lt;a href="#repeat">Repeat&lt;/a>&lt;/li>
&lt;li>&lt;a href="#customize">Customize&lt;/a>&lt;/li>
&lt;li>&lt;a href="#do-your-own-thing">Do your own thing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#real-time-reinflate">Real time (reinflate)&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- END doctoc generated TOC please keep comment here to allow auto update -->
&lt;h3 id="overview">Overview&lt;/h3>
&lt;p>The inheritance system allows you to compose task elements based on previously defined prototypes.
It has many different uses.
It is often used for the abstraction of tasks; having the behavior of multiple elements defined at a single location.
Another typical use, is for advanced randomization that is not simple to achieve using the &lt;a href="../mixer">mixer&lt;/a>.
And finally it is used as a way to keep your scripts more readable.&lt;/p>
&lt;p>The process of inheritance involves picking an element from a set, resolving that element and finally extending the inheriting element with the properties of the inherited element.
For the purpose of clarity we will use the the word &lt;em>parent&lt;/em> to describe the inherited element, and the word &lt;em>child&lt;/em> to the describe the inheriting element.jk&lt;/p>
&lt;p>The first stage in the process of inheritance is picking the parent element.
This is done by choosing an &lt;a href="#sets">element &lt;code>set&lt;/code>&lt;/a>,
the particular element to be inherited will then be chosen according to the &lt;a href="#types">inheritance type&lt;/a> which is &lt;a href="#random">random&lt;/a> by default.
Finaly, the parent element is &lt;a href="#merging">merged&lt;/a> into the the child element.&lt;/p>
&lt;h3 id="syntax">Syntax&lt;/h3>
&lt;p>In order for an element to inherit another element you should use the &lt;code>inherit&lt;/code> property.
Inherit` takes either an object or a string, with instructions for which element to inherit.&lt;/p>
&lt;p>The following element uses an object to inherit.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;setName&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;exRandom&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Using a string instead, affords a usefull shortcut to the same end.
If a string is used, the sequencer treats it as if it was a set name, and picks a random element from within that set.
So &lt;code>{inherit: 'setName'}&lt;/code> is eqivalent to &lt;code>{inherit: {set: 'setName', type: 'random'}&lt;/code>.
This option is particularly useful when you use a set with only one element and want to pick it.&lt;/p>
&lt;p>Note that you cannot use &lt;a href="templates.html">templates&lt;/a> for the &lt;code>inherit&lt;/code> property.
The reason for this is that when processing elements the sequencer first resolves the inheritance, and only then runs the templates.&lt;/p>
&lt;p>Following is a table describing the various properites of the inherit object.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>property&lt;/th>
&lt;th>description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>set&lt;/td>
&lt;td>(String) The name of the &lt;a href="#sets">set&lt;/a> from which we want to inherit.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>type&lt;/td>
&lt;td>(String) The inheritance &lt;a href="#types">type&lt;/a> - essentially how to pick from within the set (random by default).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>merge&lt;/td>
&lt;td>(Array) An array of property names that we want to &lt;a href="#merge">merge&lt;/a> instead of overwrite.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>seed&lt;/td>
&lt;td>(String) The randomization &lt;a href="#seed">seed&lt;/a>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>repeat&lt;/td>
&lt;td>(true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>customize&lt;/td>
&lt;td>(Function) A function that can &lt;a href="#customization">customize&lt;/a> the element before it is used.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="sets">Sets&lt;/h3>
&lt;p>In order to inherit an element it must be part of a &lt;code>set&lt;/code>.
Simply put, &lt;code>sets&lt;/code> are lists (arrays) of elements, with a name.
They are used both as a name for an element to inherit, and as a way to group several elements together.&lt;/p>
&lt;p>&lt;code>sets&lt;/code> are defined using the &lt;code>add&amp;lt;elementType&amp;gt;Sets&lt;/code> functions defined in the &lt;a href="../basic/API.html">API&lt;/a>.
Each element type has its own function (for example, &lt;code>addQuestionsSets&lt;/code> for miQuest).&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000">API&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addQuestionsSet&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;likert&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;selectOne&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">numericValues&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]);&lt;/span>
&lt;span style="color:#000">API&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addQuestionsSet&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;sizeLikert&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;likert&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">answers&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Big&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Medium&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Small&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that the name that you give the set (in the example: &lt;em>likert&lt;/em> or &lt;em>sizeLikert&lt;/em>) is the name that you will later use to refer to it.&lt;/p>
&lt;h3 id="merging">Merging&lt;/h3>
&lt;p>The process of inheritance involves copying all properities from the parent element to the child.
By default, any property that already exists in the child, doe not get copied over (this behaviour can be changed by using the &lt;code>merge&lt;/code> property - see below).
The exception to this rule is the &lt;code>data&lt;/code> objects which we merge (again, giving precedence to the child).&lt;/p>
&lt;p>Follow this pseudo code:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8f5902;font-style:italic">// The parent element
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;jhon&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">family&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;doe&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">questions&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">quest1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">quest2&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// The child element which attempts to inherit the parent
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;parent&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;jack&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">questions&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">quest3&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// The result would be:
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// the child kept its own name but inherited the family name
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;jack&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">family&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;doe&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// the questions array was completely overwritten
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">questions&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">quest3&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By default, inheritance ignores the properties that the child already has.
Sometimes, you have proprties of the child that you&amp;rsquo;d like to extend instead of just keeping as is (for example: a list of stimuli in miTime).
In order to do this, you can set an array of property names to the &lt;code>merge&lt;/code> property.
Any property that appears in this array will be extended instead of skipped.&lt;/p>
&lt;p>This can look something like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8f5902;font-style:italic">// The parent element
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;parent&amp;#39;&lt;/span>
&lt;span style="color:#000">stimuli&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">stim1&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// The child page which attempts to inherit the parent
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;parent&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">merge&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;stimuli&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]},&lt;/span>
&lt;span style="color:#000">stimuli&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">stim2&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// The result would be:
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// the stimuli array was merged instead of overwritten
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">stimuli&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">stim1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">stim2&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="type">Type&lt;/h3>
&lt;p>After picking a set to inherit, the inheritance type determines how to pick an element from within the set.
By default a &lt;a href="#random">random&lt;/a> element is chosen.&lt;/p>
&lt;h4 id="random">random:&lt;/h4>
&lt;p>Randomly selects an element from the set (in case the set has only one element, the same element will always be selected, of course).&lt;/p>
&lt;ul>
&lt;li>&lt;code>'setName'&lt;/code>&lt;/li>
&lt;li>&lt;code>{set: 'setName'}&lt;/code>&lt;/li>
&lt;li>&lt;code>{set: 'setName', type:'random'}&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>This is the default inheritance type, so it is not obligatory to use the &lt;code>type&lt;/code> property. You can also use a short cut and set the &lt;code>set&lt;/code> using only its name, like we did in the example above&lt;/p>
&lt;h4 id="exrandom">exRandom:&lt;/h4>
&lt;p>Selects a random element without repeating the same element until we&amp;rsquo;ve gone through the whole set&lt;/p>
&lt;ul>
&lt;li>&lt;code>{set: 'setName', type:'exRandom'}&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="equaldistribution">equalDistribution&lt;/h4>
&lt;p>Randomly selects elements from the set, keeping the number of appearances of each element equal within each cycle of n calls.
For example, if you have a set of 8 elements, and you want 40 repetitions of the set where each element appears exactly 5 times you can use the following code:
Because &lt;code>equalDistribution&lt;/code> can create multiple sets with a different number of repetitions, use of &lt;code>equalDistribution&lt;/code> &lt;em>requires&lt;/em> setting a specific &lt;a href="#seed">&lt;code>seed&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;code>{set: 'setName', type:'equalDistribution', n:5*8, seed: '40reps'}&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="sequential">sequential:&lt;/h4>
&lt;p>Selects the elements by the order they were inserted into the set&lt;/p>
&lt;ul>
&lt;li>&lt;code>{set: 'setName', type:'sequential'}&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="bydata">byData:&lt;/h4>
&lt;p>Selects a specific element from the set.
We compare the &lt;code>data&lt;/code> property to the &lt;code>element.data&lt;/code> property and if &lt;code>data&lt;/code> is a subset of &lt;code>element.data&lt;/code> it selects the element (this means that if all properties of data property equal to the properties of the same name in element.data it is a fit).
This function will select only the first element to fit the data.
If the data property is set as a string, we assume it refers to the element handle.&lt;/p>
&lt;ul>
&lt;li>&lt;code>{set: 'setName', type: 'byData', data: {block:1, row:2}}&lt;/code> picks the element with both block:1 and row:2&lt;/li>
&lt;li>&lt;code>{set: 'setName', type: 'byData', data: &amp;quot;myStimHandle&amp;quot;}&lt;/code> picks the element that has the &amp;ldquo;myStimHandle&amp;rdquo; handle&lt;/li>
&lt;/ul>
&lt;h4 id="at">at:&lt;/h4>
&lt;p>Select the element at the &lt;code>at&lt;/code> location in the set.
For example in order to pick the 3rd element in a set, use the following code:&lt;/p>
&lt;ul>
&lt;li>&lt;code>{set: 'setName', type:'at', at:3}&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="first">first:&lt;/h4>
&lt;p>Select the first element in the set.&lt;/p>
&lt;ul>
&lt;li>&lt;code>{set: 'setName', type:'first'}&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="last">last:&lt;/h4>
&lt;p>Select the last element in the set.&lt;/p>
&lt;ul>
&lt;li>&lt;code>{set: 'setName', type:'last'}&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="seed">Seed&lt;/h3>
&lt;p>Some of the inheritance types keep track of consecutive calls.
For instance &lt;a href="#sequential">&lt;code>sequential&lt;/code>&lt;/a> presents the elements in a set one after the other.
It needs to keep track of its place within the list.&lt;/p>
&lt;p>The inheritance system uses seeds to keep track of consecutive calls to the different types of inheritance.
Each inheritance query automatically gets assigned to a &amp;ldquo;seed&amp;rdquo; that is used to track its progress.
For example, the seed is used to keep track of the current element in the &lt;code>sequential&lt;/code> type inheritance.
Most of the time, the seed is transparent to the user, but sometimes it becomes useful to have manual control over the inheritance seed.
For instance, if you want to reset an &lt;code>exRandom&lt;/code> inheritance - simply use &lt;code>exRandom&lt;/code> with a new seed, the same goes if you want to keep two instances of a &lt;code>sequential&lt;/code> inheritance.
If you want to have parallel groups of inheritance to the same set, you can use seeds.&lt;/p>
&lt;p>In the following example, both elements inherit exRandomly from the &amp;ldquo;trials&amp;rdquo; set. But the second element restarts the randomization.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;trials&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;exRandom&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">seed&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;block1&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;trials&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;exRandom&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">seed&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;block2&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Seeds are not confined to a specific set, and not even to a specific element type.
A more interesting use, is to use the same seed across two different sets (you can see a real world application for this under the &lt;a href="#repeat">repeat&lt;/a> option).
It is important to take note that if you create custom seeds, it is your responsibility that they query sets of the same length.
If you try to inherit two sets with different lengths the sequencer will throw an error.
In order to create a new seed all you have to do is set the &lt;code>seed&lt;/code> property with the new seeds name (String).&lt;/p>
&lt;h3 id="repeat">Repeat&lt;/h3>
&lt;p>Sometimes we have need to repeat a previous choice done by the inheritance picker (especially in cases of randomization).
In order to do this, all you have to do is set the &lt;code>repeat&lt;/code> property to true.&lt;/p>
&lt;p>For instance, the following sequence will display a random element from the trials set twice.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;trials&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;trials&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">repeat&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>repeat&lt;/code> property can used within any type of randomization.
We&amp;rsquo;ve seen a simple use, but its true power comes when combined with &lt;a href="#seeds">seeds&lt;/a>.&lt;/p>
&lt;p>The following example uses an exRandom &lt;code>seed&lt;/code> to pick both a trial and the two stimuli associated with it
(the n&lt;sup>th&lt;/sup> element in trials is always associated with the n&lt;sup>th&lt;/sup> elements of stimuli-1 and stimuli-2).&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;trials&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;exRandom&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">seed&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;mySeed&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">stimuli&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;stimuli-1&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;exRandom&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">seed&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;mySeed&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">repeat&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;stimuli-2&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;exRandom&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">seed&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;mySeed&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">repeat&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="customize">Customize&lt;/h3>
&lt;p>This is an option only for advanced users, use this only if you really know what you are doing.&lt;/p>
&lt;p>Each element can define a &lt;code>customize&lt;/code> method, this method is called after the element is inherited but before it is activated.
It accepts two argument: the source element on which it is called, and the &lt;a href="variables.html#global">global object&lt;/a> (in which you can find the current object etc.).
The source element is also the context (this) for the function.
You should make any changes that you want on the source element itself.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;mySet&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">customize&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">function&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">element&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">global&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;span style="color:#000">element&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">questions&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">push&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">quest&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="do-your-own-thing">Do your own thing&lt;/h3>
&lt;p>This is an option only for advanced users, use this only if you really know what you are doing.&lt;/p>
&lt;p>You may also use a custom function to select an element to inherit.
The function takes a single argument: an array that holds all elements in all sets.
Each element within the array has its set name set into it automatically.
The function should return an element that will be used as the parent for the inheritance.
If it has an &lt;code>inherit&lt;/code> property then the inheritance cascade will continue.&lt;/p>
&lt;p>The following function will randomly choose an element from one of two sets: &amp;lsquo;setOne&amp;rsquo; or &amp;lsquo;setTwo&amp;rsquo;
(for reasons of brefity this snippet users ES5, if you need to support legacy browsers, you can find other ways to achieve the same thing).&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8f5902;font-style:italic">// setup the inheriting function
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">seek&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">collection&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">elements&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">collection&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">filter&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">function&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">elm&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">elm&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;setOne&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">||&lt;/span> &lt;span style="color:#000">elm&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;setTwo&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">randomIndex&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">Math&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">floor&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">elements&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">length&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#204a87">Math&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">random&lt;/span>&lt;span style="color:#000;font-weight:bold">());&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">elements&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">randomIndex&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// and then:
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">seek&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can use this option in order to create custom elements as well.
Instead of returning an element from within the element collection, you can return an element of your own.&lt;/p>
&lt;p>The following function will show the string &amp;lsquo;Question number 1&amp;rsquo;, and increment it by 1 each time that it is called.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">count&lt;/span>&lt;span style="color:#000;font-weight:bold">(){&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">stem&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Question number &amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// and then:
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">count&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="real-time-reinflate">Real time (reinflate)&lt;/h3>
&lt;p>It is possible to run into elements multiple times,
this is possible either when you have a task that allows going back to previous elements,
or when you have a task that reloads the current elements for some reason.
By default each element is processed only once, when it is first encountered during the sequence.
If you want to re-inherit an element when it is re-encountered, you should set &lt;code>reinflate&lt;/code>.&lt;/p></description></item><item><title>Docs: Mixers</title><link>/docs/sequencer/mixer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sequencer/mixer/</guid><description>
&lt;ul>
&lt;li>&lt;a href="#introduction">Introduction&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#syntax">Syntax&lt;/a>&lt;/li>
&lt;li>&lt;a href="#nesting">Nesting&lt;/a>&lt;/li>
&lt;li>&lt;a href="#real-time-remix">Real time (remix)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#sequence-evaluation-wrapper">Sequence evaluation (wrapper)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#mixer-types">Mixer types&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#repeat">repeat&lt;/a>&lt;/li>
&lt;li>&lt;a href="#random">random&lt;/a>&lt;/li>
&lt;li>&lt;a href="#choose">choose&lt;/a>&lt;/li>
&lt;li>&lt;a href="#weightedchoose">weightedChoose&lt;/a>&lt;/li>
&lt;li>&lt;a href="#weightedrandom">weightedRandom&lt;/a>&lt;/li>
&lt;li>&lt;a href="#wrapper">wrapper&lt;/a>&lt;/li>
&lt;li>&lt;a href="#branch">branch&lt;/a>&lt;/li>
&lt;li>&lt;a href="#multibranch">multiBranch&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#conditions">Conditions&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#operators">Operators&lt;/a>&lt;/li>
&lt;li>&lt;a href="#negation">Negation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#aggregation">Aggregation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#debugging">Debugging&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;p>Mixers allow you to control the flow of your sequences within the PI tasks.
In particular they allow you to repeat, randomize and even branch sections of your sequence according to &lt;a href="../variables">environmental variables&lt;/a>.&lt;/p>
&lt;h4 id="syntax">Syntax&lt;/h4>
&lt;p>Each one of the PI tasks is composed of a sequence of elements that is presented sequentially.
For example, the sequence in miManager is composed of elements that each represent a task.
These sequences are created using the &lt;code>API.addSequence&lt;/code> method in your script.
Mixers are inserted into the sequence the same way that regular elements are.
Each mixer represents a sub-sequence that is to be manipulated and then inserted in its place.&lt;/p>
&lt;p>For example, in the following sequence the second element is a mixer.
It takes a sub-sequence than includes tasks two and three and randomizes their order.
Note that the mixer element is effectively replaced by the two elements from the sub-sequence, turning this sequence into a four task sequence.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8f5902;font-style:italic">// The task sequence
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">API&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addSequence&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// First Element: task 1
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;message&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">template&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Task 2&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">keys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Second Element: the mixer (task 2 and 3 randomized)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;message&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">template&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Task 2&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">keys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;message&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">template&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Task 3&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">keys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Third Element: task 4
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;message&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">template&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Task 4&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">keys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Each mixer has a type associated with it as well as at least one sub-sequence.
The &lt;code>mixer&lt;/code> property always holds the mixer type (see below for the available types).
In most cases the &lt;code>data&lt;/code> property holds the sub-sequence (the exception is with the branching mixers that may hold multiple sub-sequences).&lt;/p>
&lt;p>A typical mixer looks something like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// &amp;lt;== The mixer type (randomize in this case)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">elem1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">elem2&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// &amp;lt;== The sub-sequence (holding elem1 and elem2)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>From now on, instead of explicitly writing in the mixed elements we will use arbitrary variable names instead, such as &lt;code>elem1&lt;/code> and &lt;code>elem2&lt;/code>.
We are doing this to keep the structures as simple and readable as possible.&lt;/p>
&lt;h4 id="nesting">Nesting&lt;/h4>
&lt;p>Mixers may be nested inside each other as much as you like. The following example illustrates a more complex example.
Here, we have an opening and ending element (&lt;code>firstelem&lt;/code> and &lt;code>lastelem&lt;/code>).
Between them we repeat a set of four elements ten times.
The order within the four objects is randomized, so that &lt;code>elem1&lt;/code> always comes first and the order of the following elements is randomized but &lt;code>elem3&lt;/code> and &lt;code>elem4&lt;/code> are wrapped together and therefore always stay consecutive.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000">API&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addSequence&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// The first element
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">firstelem&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Repeat the structure inside 10 time (so we get 40 objects overall)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;repeat&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">wrapper&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Delay the mixing of these elements until after the `repeat`.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">times&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">elem1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Randomize the order of the elements within.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">elem2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Keep obj 3 and 4 together.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;wrapper&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">elem3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">elem4&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// end random
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// end repeat
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// the last element
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">lastelem&lt;/span>
&lt;span style="color:#000;font-weight:bold">]);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="real-time-remix">Real time (remix)&lt;/h4>
&lt;p>By default each mixer is processed only once, when it is first encountered during the sequence.
There are only two conditions for when this is relevant.
The first is when your task allows moving back to previous elements; in that case the mixer will keep the mixer elements as they where previously evaluated.
The second condition is when you have a branch that you want to react to live changes (at this time this is relevant only for miQuest answers).&lt;/p>
&lt;p>If you want a mixer to react to changes in the environment you need to set &lt;code>remix=true&lt;/code>.&lt;/p>
&lt;p>The following snippet uses &lt;code>remix&lt;/code> to show a second question depending on the response of the first one (in miQuest).&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">page&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">questions&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// First question
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;q1,
&lt;/span>&lt;span style="color:#4e9a06"> stem: &amp;#39;&lt;/span>&lt;span style="color:#000">Please&lt;/span> &lt;span style="color:#000">write&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;hello&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;
&lt;/span>&lt;span style="color:#4e9a06"> },
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> // The mixer
&lt;/span>&lt;span style="color:#4e9a06"> {
&lt;/span>&lt;span style="color:#4e9a06"> mixer: &amp;#39;&lt;/span>&lt;span style="color:#000">branch&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;,
&lt;/span>&lt;span style="color:#4e9a06"> remix: true,
&lt;/span>&lt;span style="color:#4e9a06"> conditions: [ {compare: &amp;#39;&lt;/span>&lt;span style="color:#000">current&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">questions&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">q1&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;, to: &amp;#39;&lt;/span>&lt;span style="color:#000">hello&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;} ],
&lt;/span>&lt;span style="color:#4e9a06"> data: [
&lt;/span>&lt;span style="color:#4e9a06"> // Dependent question
&lt;/span>&lt;span style="color:#4e9a06"> {
&lt;/span>&lt;span style="color:#4e9a06"> stem: &amp;#39;&lt;/span>&lt;span style="color:#000">You&lt;/span> &lt;span style="color:#000">said&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;hello&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#a40000">&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="sequence-evaluation-wrapper">Sequence evaluation (wrapper)&lt;/h4>
&lt;p>Most of the time, mixers are lazily processed.
This means that the sequencer waits until it reaches the mixer before expanding it.
This behaviour allows us to use branching mixers - we don&amp;rsquo;t decide which branch to take until we reach it.
The exception to this rule is randomizing mixers (such as &lt;code>randomize&lt;/code> or &lt;code>choose&lt;/code>), that in order to randomize &lt;em>everything&lt;/em> inside them, must pre-mix all their content.&lt;/p>
&lt;p>This behaviour may cause some problematic results.
For instance, a branching mixer within a randomization mixer, will be calculated according to the state of the task when it first reaches the randomizer, and not according to the state when it reaches the branch itself.
If you have a randomizer &amp;gt; repeat &amp;gt; randomizer then the repeat will process an already randomized random mixer, and the repeated units will all be the same.
The solution in this case is to wrap the inner mixer within a &lt;a href="#wrapper">wrapper mixer&lt;/a> (or set the &lt;code>wrapper&lt;/code> property to true).
This way the randomizer will treat anything within the wrapper as a single unit and will not pre-mix it.&lt;/p>
&lt;p>Random randomizes the order of all the elements under the random mixer&amp;rsquo;s data array, even if they are inside a mixer.
For example, consider the following code:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">elem1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;repeat&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">times&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">elem2&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It will form one of the following sequences:&lt;/p>
&lt;ul>
&lt;li>[elem1,elem2,elem2]&lt;/li>
&lt;li>[elem2,elem1,elem2]&lt;/li>
&lt;li>[elem2,elem2,elem1]&lt;/li>
&lt;/ul>
&lt;p>If you want to keep some of the elements in the data together (and not randomized), use the &lt;code>wrapper&lt;/code> mixer. For instance:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">mixer&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">elem1&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;wrapper&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">elem2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">elem3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">elem4&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code will keep elem2, elem3, and elem4 together, in that same order (elem2, elem3, elem4), and will randomly present elem1 before or after these three objects.&lt;/p>
&lt;p>Sometimes you may want to make a mixer be a &lt;code>wrapper&lt;/code> enen though it is already another kind of mixer.
You can do that by adding &lt;code>wrapper:true&lt;/code>. For example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">mixer&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">elem1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;repeat&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">times&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">wrapper&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">elem2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">elem3&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code will results in one of the following sequences:&lt;/p>
&lt;ul>
&lt;li>[elem1,elem2,elem3,elem2,elem3]&lt;/li>
&lt;li>[elem2,elem3,elem2,elem3,elem1]&lt;/li>
&lt;/ul>
&lt;p>If you want to randomize the order of two lists, and randomize the objects within each list but without mixing the two lists together, the following code will do the trick:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">mixer&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">wrapper&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">elem1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">elem2&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">wrapper&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">elem3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">elem4&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code will create one of the following sequences:&lt;/p>
&lt;ul>
&lt;li>[elem1,elem2,elem3,elem4]&lt;/li>
&lt;li>[elem1,elem2,elem4,elem3]&lt;/li>
&lt;li>[elem2,elem1,elem3,elem4]&lt;/li>
&lt;li>[elem2,elem1,elem4,elem3]&lt;/li>
&lt;li>[elem3,elem4,elem1,elem2]&lt;/li>
&lt;li>[elem4,elem3,elem1,elem2]&lt;/li>
&lt;li>[elem3,elem4,elem2,elem1]&lt;/li>
&lt;li>[elem4,elem3,elem2,elem1]&lt;/li>
&lt;/ul>
&lt;p>The following snippet uses the wrapper property to keep the content of the repeat mixer together.
@TODO: find a good example for the use of wrappers.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">elem1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;repeat&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">times&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">wrapper&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">elem2&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="mixer-types">Mixer types&lt;/h3>
&lt;h4 id="repeat">repeat&lt;/h4>
&lt;p>Repeats the sub-sequence in &lt;code>data&lt;/code> &lt;code>times&lt;/code> times.
So that the following mixer:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;repeat&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">times&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">elem1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">elem2&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Will be transformed into:&lt;/p>
&lt;ul>
&lt;li>[elem1,elem2,elem1,elem2,elem1,elem2]&lt;/li>
&lt;/ul>
&lt;h4 id="random">random&lt;/h4>
&lt;p>Randomizes the order of elements in &lt;code>data&lt;/code>.
So that the following mixer:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">elem1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">elem2&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Will be transformed into one of the following:&lt;/p>
&lt;ul>
&lt;li>[elem1, elem2]&lt;/li>
&lt;li>[elem2, elem1]&lt;/li>
&lt;/ul>
&lt;p>Please note that the &lt;code>random&lt;/code> mixer pre-mixes all the content in &lt;code>data&lt;/code>, please see &lt;a href="#evaluation">sequence evaluation&lt;/a> and the &lt;a href="#wrapper">wrapper mixer&lt;/a> for more details and related problems.&lt;/p>
&lt;h4 id="choose">choose&lt;/h4>
&lt;p>Choose one or more (&lt;code>n&lt;/code>) elements out of &lt;code>data&lt;/code>.
By default, &lt;code>choose&lt;/code> picks a single element form the &lt;code>data&lt;/code> subsequence:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;choose&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">elem1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">elem2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">elem3&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Will be transformed into one of the following:&lt;/p>
&lt;ul>
&lt;li>[elem1]&lt;/li>
&lt;li>[elem2]&lt;/li>
&lt;li>[elem3]&lt;/li>
&lt;/ul>
&lt;p>You can choose more than one element by setting &lt;code>n&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;choose&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">n&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">elem1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">elem2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">elem3&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That will return one of the following:&lt;/p>
&lt;ul>
&lt;li>[elem1, elem2]&lt;/li>
&lt;li>[elem1, elem3]&lt;/li>
&lt;li>[elem2, elem3]&lt;/li>
&lt;/ul>
&lt;h4 id="weightedchoose">weightedChoose&lt;/h4>
&lt;p>Choose one or more (&lt;code>n&lt;/code>) elements out of &lt;code>data&lt;/code>. Using a weighted random algorithm.
Each element in &lt;code>data&lt;/code> is given the appropriate weight from &lt;code>weights&lt;/code>.
&lt;code>weightedChoose&lt;/code> does inclusive randomization. This means that elements may be picked more than once.&lt;/p>
&lt;p>In the following example elem2 has four times the probability of being selected as elem1;&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;weightedChoose&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">n&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">weights&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.8&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">elem1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">elem2&lt;/span>&lt;span style="color:#000;font-weight:bold">]}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code will create one of the following sequences:&lt;/p>
&lt;ul>
&lt;li>[elem1,elem1] - 4% of cases&lt;/li>
&lt;li>[elem1,elem2] - 16% of cases&lt;/li>
&lt;li>[elem2,elem1] - 16% of cases&lt;/li>
&lt;li>[elem2,elem2] - 64% of cases&lt;/li>
&lt;/ul>
&lt;h4 id="weightedrandom">weightedRandom&lt;/h4>
&lt;p>Alias (synonym) that can be used interchangeably with &lt;a href="#weightedChoose">&lt;code>weightedChoose&lt;/code>&lt;/a>.&lt;/p>
&lt;h4 id="wrapper">wrapper&lt;/h4>
&lt;p>The wrapper mixer serves a sort of parenthesis for the mixer.
It is used to keep a sub-sequence of elements to be randomized within one of the randomizing mixers (such as &lt;a href="#random">random&lt;/a> or &lt;a href="#choose">choose&lt;/a>).
In case you want to keep a sub-sequence as a block (when randomizing) simply wrap them and they&amp;rsquo;ll stay together.
You can find more use cases in the &lt;a href="#evaluation">sequence evaluation&lt;/a> section.&lt;/p>
&lt;p>The following snippet uses a wrapper to keep two elements together despite a being in a randomizer;&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">elem1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;wrapper&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">elem2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">elem3&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It will return one of the following (elem2 and elem3 are always kept together):&lt;/p>
&lt;ul>
&lt;li>[elem1, elem2, elem3]&lt;/li>
&lt;li>[elem2, elem3, elem1]&lt;/li>
&lt;/ul>
&lt;p>The wrapper mixer is special in that it has an alternative syntax.
You can add a &lt;code>wrapper&lt;/code> property to any existing mixer, and it contents will be treated as if they were wrapped in a wrapper.
This will look like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;repeat&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">wrapper&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">elem1&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="branch">branch&lt;/h4>
&lt;p>The branch mixer allows you to choose the flow of your sequence according to environmental conditions.
You can learn about environmental conditions &lt;a href="../variables">here&lt;/a> and about how to create conditions &lt;a href="#conditions">here&lt;/a>.
This section will deal only with the stucture and use of the &lt;code>branch&lt;/code> mixer itself.&lt;/p>
&lt;p>The branch mixer evaluates the &lt;code>conditions&lt;/code> if they are true it returns the sequence in &lt;code>data&lt;/code>, if they are false it returns the sequence in &lt;code>elseData&lt;/code>.
If &lt;code>elseData&lt;/code> is not defined, or is left empty, then nothing happen in case the conditions are not true (see &lt;a href="#conditions">conditions&lt;/a> to learn more about how conditions work).&lt;/p>
&lt;p>The following mixer:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;branch&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">conditions&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">cond&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">elem1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">elem2&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#000">elseData&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">elem3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">elem4&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// optional
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Will return&lt;/p>
&lt;ul>
&lt;li>[elem1,elem2] - if the condition is true&lt;/li>
&lt;li>[elem3,elem4] - if the condition is false&lt;/li>
&lt;/ul>
&lt;h4 id="multibranch">multiBranch&lt;/h4>
&lt;p>&lt;code>multiBranch&lt;/code> is similar to the &lt;a href="#branch">&lt;code>branch&lt;/code>&lt;/a> mixer, only it allows you to switch between a list of conditions instead of only one.
The mixer will attempt to find the first object within the &lt;code>branches&lt;/code> array for which &lt;code>conditions&lt;/code> is true, and select the sub-sequence in that objects &lt;code>data&lt;/code>.
If no object is selected then select the sub-sequence in &lt;code>elseData&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;multiBranch&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">branches&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">conditions&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">cond1&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">elem1&lt;/span>&lt;span style="color:#000;font-weight:bold">]},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">conditions&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">cond2&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">elem2&lt;/span>&lt;span style="color:#000;font-weight:bold">]}&lt;/span>
&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#000">elseData&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">elem3&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// optional
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Will return&lt;/p>
&lt;ul>
&lt;li>[elem1] - if cond1 is true&lt;/li>
&lt;li>[elem2] - if cond2 is true (but not cond1)&lt;/li>
&lt;li>[elem3] - if both cond1 and cond2 are false&lt;/li>
&lt;/ul>
&lt;h4 id="custom">custom&lt;/h4>
&lt;p>&lt;code>custom&lt;/code> allows you to create arbitrary sub-sequences.
It uses the sub-sequence that is returned from the &lt;code>fn&lt;/code> function.
&lt;code>fn&lt;/code> must return an array of elements.&lt;/p>
&lt;p>&lt;code>fn&lt;/code> has two arguments available: the mixer object itself, and the mixer context (as defined &lt;a href="./variables.html">here&lt;/a>).
You can either use them to create your elments or create elements arbitrarily.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;custom&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">prop&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Custom property&amp;#39;&lt;/span>
&lt;span style="color:#000">fn&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">function&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">obj&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">elem1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">elem2&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="conditions">Conditions&lt;/h3>
&lt;p>The conditional mixers (&lt;a href="#branch">&lt;code>branch&lt;/code>&lt;/a> &amp;amp; &lt;a href="#multibranch">&lt;code>multiBranch&lt;/code>&lt;/a>) allow you to change the content of your sequence depending on &lt;a href="../variables">environmental variables&lt;/a>.
This is done by settings &lt;code>conditions&lt;/code>.
A condition is a statement that is evaluated either as &lt;code>true&lt;/code> or &lt;code>false&lt;/code>.
We choose the branch we advance to according to the result.
You can think of each condition as an equation that compares two values.
Conditions are each represented by an object as follows:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Property&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>compare&lt;/td>
&lt;td>The left side of the equation.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>to&lt;/td>
&lt;td>The right side of the equation.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>operator&lt;/td>
&lt;td>The type of comparison to do (defaults to &amp;lsquo;equals&amp;rsquo;. Read more about operators &lt;a href="#operators">here&lt;/a>).&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The values set into &lt;code>compare&lt;/code> and &lt;code>to&lt;/code> can be set either as plain values or as references to environmental variables:
When you want to reference an environmental variable, you use text with dots: &lt;code>global.var&lt;/code>, &lt;code>questions.q1.response&lt;/code>
(questions.q1.response` will retrieve the value of the response for q1 from the questions object).&lt;/p>
&lt;p>The following condition object compare&amp;rsquo;s &lt;strong>global.var&lt;/strong> &lt;code>to&lt;/code> &lt;strong>current.otherVar&lt;/strong> and checks if they are equal.
It is equivalent to the following equation: &lt;code>global.myVar === current.myOtherVar&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">cond&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">compare&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;global.myVar&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">to&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;current.myOtherVar&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here are some examples of comparing variables with plain values:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8f5902;font-style:italic">//Compares the variable time to the value 12
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">cond1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">compare&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;global.time&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">to&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;12&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//Compare the variable gender to the value &amp;#39;Female&amp;#39;
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">cond2&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">compare&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Female&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">to&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;local.gender&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Sometimes the standard conditions are not enough.
More advanced users may want to replace the whole condition object with a custom function that returns true or false.
The context (&lt;code>this&lt;/code>) for the function is an object holding the &lt;em>global&lt;/em> and &lt;em>current&lt;/em> objects
(there are some cases where additional properties are available, they are documented in their own docs).&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">cond&lt;/span>&lt;span style="color:#000;font-weight:bold">(){&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">global&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">global&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// get the global from the context
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">global&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">skip&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="operators">Operators&lt;/h4>
&lt;p>The default comparison for a condition is to check equality (supports comparison of objects and arrays too). You can use the &lt;code>operator&lt;/code> property to change the comparison method. The following checks if var is greater than otherVar:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">cond&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">compare&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;global.var&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">to&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;local.otherVar&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">operator&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;greaterThan&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Operator&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>equals&lt;/td>
&lt;td>This is the default operator. It checks if &lt;em>compare&lt;/em> is equal to &lt;em>to&lt;/em> (supports comparison of objects and arrays too)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>exactly&lt;/td>
&lt;td>Checks if &lt;em>compare&lt;/em> is exactly equal to &lt;em>to&lt;/em> (uses ===)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>greaterThan&lt;/td>
&lt;td>&lt;em>compare&lt;/em> &amp;gt; &lt;em>to&lt;/em>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>greaterThanOrEquals&lt;/td>
&lt;td>&lt;em>compare&lt;/em> &amp;gt;= &lt;em>to&lt;/em>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>in&lt;/td>
&lt;td>&lt;em>compare&lt;/em> is in the Array &lt;em>to&lt;/em>;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>isTruthy&lt;/td>
&lt;td>&lt;em>compare&lt;/em> == true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>function(){}&lt;/td>
&lt;td>This operator allows you to use a custom function of the form: &lt;code>function(compareValue, toValue, context){return {Boolean}}&lt;/code>. The context is an object holding the &lt;em>global&lt;/em>, &lt;em>current&lt;/em> and &lt;em>questions&lt;/em> objects.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="negation">Negation&lt;/h4>
&lt;p>If you want to check for inequality (or make sure that a value is &lt;em>not&lt;/em> in an array and so on, you can use the &lt;code>negate&lt;/code> property.
&lt;code>negate&lt;/code> makes the mixer use the oposite value for that condition - true values become false and vice versa.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">cond&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">compare&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;global.flag&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">to&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;current.flag&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">negate&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>
&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="aggregation">Aggregation&lt;/h4>
&lt;p>Sometimes you will want a branch to be activated only if more than one condition is true, or in some other complex specific condition.
For cases like this, the mixer supports aggregation.
The mixer supports applying logical operations on conditions in the following way:&lt;/p>
&lt;p>An aggregator object has a single property, denoting the type of aggregation, holding an array of conditions to aggregate.
The following condition will only be true if &lt;code>cond1&lt;/code> and &lt;code>cond2&lt;/code> are both true:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">cond&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">and&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">cond1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">cond2&lt;/span>&lt;span style="color:#000;font-weight:bold">]};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The mixer supports several types of aggregators:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Aggregator&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>and&lt;/td>
&lt;td>If all conditions are true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>or&lt;/td>
&lt;td>If at least one condition is true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>nor&lt;/td>
&lt;td>If all conditions are false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>nand&lt;/td>
&lt;td>If at least one condition is false&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>By default, if the mixer runs into an array instead of an object, it will treat it as an &lt;code>and&lt;/code> aggregator and be true only if all conditions within the array are true.&lt;/p>
&lt;p>Following are several examples for how to create different aggregations:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8f5902;font-style:italic">// cond1 &amp;amp;&amp;amp; cond2
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">conds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">cond1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">cond2&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// cond1 &amp;amp;&amp;amp; (cond2 || cond3)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">conds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">cond1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">or&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">cond2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">cond3&lt;/span>&lt;span style="color:#000;font-weight:bold">]}];&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// (cond1 &amp;amp;&amp;amp; cond2) || cond2
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">conds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[{&lt;/span>&lt;span style="color:#000">or&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[{&lt;/span>&lt;span style="color:#000">and&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">cond1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">cond2&lt;/span>&lt;span style="color:#000;font-weight:bold">]},&lt;/span>&lt;span style="color:#000">cond3&lt;/span>&lt;span style="color:#000;font-weight:bold">]}]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="debugging">Debugging&lt;/h4>
&lt;p>Conditions are notoriously difficult to get just right.
If they aren&amp;rsquo;t working as you expected, you might want to see exactly which values you are getting for each of your conditions.
The mixer provides you with an easy way to do this. Just set &lt;code>DEBUG=true&lt;/code> on your condition, and you will see all the said values being printed into your &lt;a href="../../core/javascript#errors-and-debugging">console&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000">API&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addGlobal&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span>
&lt;span style="color:#000">value&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">123&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">otherVar&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">345&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">cond&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">compare&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;global.var&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">to&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;global.otherVar&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">DEBUG&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The debugger will log something like &lt;code>Conditions: 123 equals 345&lt;/code> as well as the full condition object as it appears in your code.&lt;/p></description></item><item><title>Docs: Sequencer</title><link>/docs/sequencer/sequencer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sequencer/sequencer/</guid><description>
&lt;ul>
&lt;li>&lt;a href="#overview">Overview&lt;/a>&lt;/li>
&lt;li>&lt;a href="#mixer">Mixer&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#mixer-types">Mixer types&lt;/a>&lt;/li>
&lt;li>&lt;a href="#conditions">Conditions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#operators">Operators&lt;/a>&lt;/li>
&lt;li>&lt;a href="#aggregation">Aggregation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#templates">Templates&lt;/a>&lt;/li>
&lt;li>&lt;a href="#variables">Variables&lt;/a>&lt;/li>
&lt;li>&lt;a href="#inheritance">Inheritance&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#sets">Sets&lt;/a>&lt;/li>
&lt;li>&lt;a href="#inheriting">Inheriting&lt;/a>&lt;/li>
&lt;li>&lt;a href="#merge">Merge&lt;/a>&lt;/li>
&lt;li>&lt;a href="#type">Type&lt;/a>&lt;/li>
&lt;li>&lt;a href="#repeat">Repeat&lt;/a>&lt;/li>
&lt;li>&lt;a href="#seed">Seed&lt;/a>&lt;/li>
&lt;li>&lt;a href="#customization">Customization&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="overview">Overview&lt;/h3>
&lt;p>All PI tasks use the same framework to manage their elements. Its purpose is to allow dynamic creation and management of your elements. It has three critical components: The sequence mixer, inheritance and templating.&lt;/p>
&lt;p>Each PI task is composed of a series of elements sequentially activated and presented to the users (these are trials for miTime, pages for miQuest and tasks for miManager). The sequence &lt;a href="#mixer">&lt;strong>mixer&lt;/strong>&lt;/a> is responsible for the order of the elements presented to the users, it is capable of randomization as well as various other manipulations on the structure of the sequence.&lt;/p>
&lt;p>Each element may be based upon other elements. This allows us to create simpler scripts as well as add a level of randomization to our tasks. In order to base an element on other elements we use the &lt;a href="#inheritance">inheritance&lt;/a> system.&lt;/p>
&lt;p>All tasks use a system of global as well as local variables that can be used to customize elements (as well as some other things). You can put the &lt;a href="#variables">variables&lt;/a> at your service using &lt;a href="#templates">templates&lt;/a> that allow you to have your settings dynamically depend on the environmental variables.&lt;/p>
&lt;p>We will start by reviewing the sequence and mixers. And then get into inheritance, variables and templates.&lt;/p>
&lt;h3 id="mixer">Mixer&lt;/h3>
&lt;p>The mixer is responsible for managing sequences of elements within the PI tasks, it is capable of repeating, randomizing and even changing the list according to &lt;a href="#variables">environmental variables&lt;/a>. You may use it within the sequence or within some of the lists within pi tasks (such as miQuest questions arrays).&lt;/p>
&lt;p>The mixer allows wrapping a sub sequence in an object that allows you to manipulate the way in which it appears. You may insert such an object at any place within a sequence and it will be replaced by the appropriate objects.&lt;/p>
&lt;p>The basic structure of a mixer object is:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;mixerType&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// let the sequencer know that this is a mixer
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">obj1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obj2&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// define the sub-sequence to be mixed
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>mixer&lt;/code> property defines the mixer type. It tells the mixer what to do with the sub-sequence. The &lt;code>data&lt;/code> property defines the sub-sequence; an array of elements (either plain objects or mixer objects themselves).&lt;/p>
&lt;p>A sequence can look something like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// The first obj to present.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">firstobj&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Repeat the structure inside 10 time (so we get 40 objs)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;repeat&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">times&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Delay the mixing of these elements until after the `repeat`.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;wrapper&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">obj1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Randomize the order of the objectss within.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">obj2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Keep obj 3 and 4 together.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;wrapper&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">obj3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">obj4&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// end random
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// end wrapper
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// end repeat
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// the last obj to present
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">lastobj&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This sequence has an opening and ending obj (&lt;code>firstobj&lt;/code> and &lt;code>lastobj&lt;/code>).
Between them them we repeat a set of four objs ten times.
The order within the four objects is randomized, so that &lt;code>obj1&lt;/code> always comes first and the order of the following objs are randomized but &lt;code>obj3&lt;/code> and &lt;code>obj4&lt;/code> are wrapped together and therefore always stay consecutive.&lt;/p>
&lt;h4 id="mixer-types">Mixer types&lt;/h4>
&lt;p>&lt;strong>repeat&lt;/strong>:
Repeats the element in &lt;code>data&lt;/code> &lt;code>times&lt;/code> times.&lt;/p>
&lt;ul>
&lt;li>&lt;code>{mixer:'repeat', times:10, data: [obj1,obj2]}&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>random&lt;/strong>:
Randomizes the order of elements in &lt;code>data&lt;/code>. Random randomizes the order of all the elements under the random mixer&amp;rsquo;s data array, even if they are inside a mixer. For example, consider the following code:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">mixer&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">obj1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;repeat&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">times&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">obj2&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It will form one of the following sequences:&lt;/p>
&lt;ul>
&lt;li>[obj1,obj2,obj2]&lt;/li>
&lt;li>[obj2,obj1,obj2]&lt;/li>
&lt;li>[obj2,obj2,obj1]&lt;/li>
&lt;/ul>
&lt;p>If you want to keep some of the elements in the data together (and not randomized), use the &lt;code>wrapper&lt;/code> mixer. For instance:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">mixer&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">obj1&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;wrapper&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">obj2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">obj3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">obj4&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code will keep obj2, obj3, and obj4 together, in that same order (obj2, obj3, obj4), and will randomly present obj1 before or after these three objects.&lt;/p>
&lt;p>You can make any mixer into a wrapper by adding &lt;code>wrapper:true&lt;/code>. For example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">mixer&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">obj1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;repeat&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">times&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">wrapper&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">obj2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">obj3&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code will results in one of the following sequences:&lt;/p>
&lt;ul>
&lt;li>[obj1,obj2,obj3,obj2,obj3]&lt;/li>
&lt;li>[obj2,obj3,obj2,obj3,obj1]&lt;/li>
&lt;/ul>
&lt;p>If you want to randomize the order of two lists, and randomize the objects within each list but without mixing the two lists together, the following code will do the trick:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">mixer&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">wrapper&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">obj1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">obj2&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">wrapper&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">obj3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">obj4&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code will create one of the following sequences:&lt;/p>
&lt;ul>
&lt;li>[obj1,obj2,obj3,obj4]&lt;/li>
&lt;li>[obj1,obj2,obj4,obj3]&lt;/li>
&lt;li>[obj2,obj1,obj3,obj4]&lt;/li>
&lt;li>[obj2,obj1,obj4,obj3]&lt;/li>
&lt;li>[obj3,obj4,obj1,obj2]&lt;/li>
&lt;li>[obj4,obj3,obj1,obj2]&lt;/li>
&lt;li>[obj3,obj4,obj2,obj1]&lt;/li>
&lt;li>[obj4,obj3,obj2,obj1]&lt;/li>
&lt;/ul>
&lt;p>Please note that the &lt;code>random&lt;/code> mixer pre-computes all the content in &lt;code>data&lt;/code>, so that any branching mixers will be branched according to the state of the study at the time of the randomization. So, if you have a branch that depends on a previous object, make sure that the branch always comes after that object. Again, you can use wrapper:true in a branch (or multiBranch) mixer, if you need to keep the order of some objects fixed for the branching to make sense.&lt;/p>
&lt;p>&lt;strong>choose&lt;/strong>:
Selects &lt;code>n&lt;/code> random elements from &lt;code>data&lt;/code> (by default the chooser picks one element).&lt;/p>
&lt;ul>
&lt;li>&lt;code>{mixer:'choose', data: [obj1,obj2]}&lt;/code> pick one of these two objs&lt;/li>
&lt;li>&lt;code>{mixer:'choose', n:2, data: [obj1,obj2,obj3]}&lt;/code> pick two of these three objs&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>weightedChoose&lt;/strong>:
Chooses &lt;code>n&lt;/code> random elements from data using a weighted randomize algorithm. Each element in &lt;code>data&lt;/code> is given the appropriate weight from &lt;code>weights&lt;/code>. And may be picked once or more. In the following example obj2 has four times the probability of being selected as obj1.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;weightedChoose&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">n&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">weights&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.8&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">obj1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">obj2&lt;/span>&lt;span style="color:#000;font-weight:bold">]}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code will create one of the following sequences:&lt;/p>
&lt;ul>
&lt;li>[obj1,obj1] - 4% of cases&lt;/li>
&lt;li>[obj1,obj2] - 16% of cases&lt;/li>
&lt;li>[obj2,obj1] - 16% of cases&lt;/li>
&lt;li>[obj2,obj2] - 64% of cases&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>weightedRandom&lt;/strong>:
Alias for &lt;code>weightedChoose&lt;/code>.&lt;/p>
&lt;p>&lt;strong>wrapper&lt;/strong>:
The wrapper mixer serves a sort of parenthesis for the mixer. In case you want to keep a set of elements as a block (when randomizing) simply wrap them and they&amp;rsquo;ll stay together.&lt;/p>
&lt;ul>
&lt;li>&lt;code>{mixer:'wrapper', data: [obj1,obj2]}&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>branch&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>{mixer:'branch', conditions:[cond], data:[obj1,obj2]}&lt;/code>&lt;/li>
&lt;li>&lt;code>{mixer:'branch', conditions:[cond], data:[obj1,obj2], elseData: [obj3, obj4]}&lt;/code>
Select the elements in &lt;code>data&lt;/code> if all the conditions in the &lt;code>conditions&lt;/code> array are true, select the elements in &lt;code>elseData&lt;/code> if at least one of the conditions in &lt;code>conditions&lt;/code> are not true. If &lt;code>elseData&lt;/code> is not defined, or is left empty, then nothing happen in case the conditions are not true (See &lt;a href="#conditions">conditions&lt;/a> to learn about how conditions work).&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>multiBranch&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mixer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;multiBranch&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">branches&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">conditions&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[],&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[]},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">conditions&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[],&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[]}&lt;/span>
&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#000">elseData&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// optional
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Find the first object within &lt;code>branches&lt;/code> for which &lt;code>conditions&lt;/code> is true, and select the elements in that objects &lt;code>data&lt;/code>. If no object is selected then select &lt;code>elseData&lt;/code> (optional). (See &lt;a href="#conditions">conditions&lt;/a> to learn about how conditions work).&lt;/p>
&lt;p>&lt;strong>custom&lt;/strong>
Custom mixers must return an array of appropriate elements.
You can create them using the mixer context and the mixer element itself, or use them to create arbitrary elements as you like.&lt;/p>
&lt;p>``js
{
mixer: &amp;lsquo;custom&amp;rsquo;,
fn: function(obj, context){
return [elem1, elem2]
}
}&lt;/p>
&lt;pre>&lt;code>#### Conditions
The conditional mixers (`branch` &amp;amp; `multiBranch`) allow you to change the content of a list according to [environmental variables](#variables). Each list has specific variables available to it, you can find the relevant details in the documentation for each list, but all lists have access to the `global` and `current` objects, so we'll use them for all examples here.
A condition is a proposition, it is evaluated to either a `true` or `false` value. Conditions are used for decision making within the branching mixers. Conditions are represented by objects. The following condition object `compare`s **global.var** `to` **current.otherVar** and examines if they are equal (if you aren't sure what **global.var** means, see [here](#variables)):
```javascript
var cond = {
compare: 'global.myVar',
to: 'current.myOtherVar'
}
&lt;/code>&lt;/pre>&lt;p>Conditions should be treated as a type of equation.&lt;/p>
&lt;p>In the &lt;code>compare&lt;/code> and &lt;code>to&lt;/code> properties you can set either straight forward values or references to a variable:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8f5902;font-style:italic">//Compares the variable time to the value 12
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">cond1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">compare&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;global.time&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">to&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;12&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">//Compare the variable gender to the value &amp;#39;Female&amp;#39;
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">cond2&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">compare&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Female&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">to&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;local.gender&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When you want to refer to a variable, you use text with dots: &lt;code>global.var&lt;/code>, &lt;code>questions.q1.response&lt;/code>; these values will be treated as pointing to variables within the lists context. &lt;code>questions.q1.response&lt;/code> will retrieve the value of the response for q1 from the questions object.&lt;/p>
&lt;p>Here are the condition&amp;rsquo;s possible properties:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Property&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>compare&lt;/td>
&lt;td>The left side of the equation.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>to&lt;/td>
&lt;td>The right side of the equation.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>operator&lt;/td>
&lt;td>The type of comparison to do (read more about operators &lt;a href="#operators">here&lt;/a>).&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>In miQuest and miManager, you may want to debug conditions by &lt;a href="#debugging">activating the DEBUG &lt;code>conditions&lt;/code> setting&lt;/a>. When activated, then any condition that is evaluated will be logged to the console.&lt;/p>
&lt;p>Advanced users may want to replace the whole condition object with a custom function that returns true or false. The context for the function is an object holding the &lt;em>global&lt;/em>, &lt;em>current&lt;/em> and &lt;em>questions&lt;/em> objects.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">cond&lt;/span>&lt;span style="color:#000;font-weight:bold">(){&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">global&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">global&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// get the global from the context
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">global&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">skip&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="operators">Operators&lt;/h4>
&lt;p>The default comparison for a condition is to check equality (supports comparison of objects and arrays too). You can use the &lt;code>operator&lt;/code> property to change the comparison method. The following checks if var is greater than otherVar:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">cond&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">compare&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;global.var&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">to&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;local.otherVar&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">operator&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;greaterThan&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Operator&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>equals&lt;/td>
&lt;td>This is the default operator. It checks if &lt;em>compare&lt;/em> is equal to &lt;em>to&lt;/em> (supports comparison of objects and arrays too)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>exactly&lt;/td>
&lt;td>Checks if &lt;em>compare&lt;/em> is exactly equal to &lt;em>to&lt;/em> (uses ===)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>greaterThan&lt;/td>
&lt;td>&lt;em>compare&lt;/em> &amp;gt; &lt;em>to&lt;/em>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>greaterThanOrEquals&lt;/td>
&lt;td>&lt;em>compare&lt;/em> &amp;gt;= &lt;em>to&lt;/em>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>in&lt;/td>
&lt;td>&lt;em>compare&lt;/em> is in the Array &lt;em>to&lt;/em>;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>function(){}&lt;/td>
&lt;td>This operator allows you to use a custom function of the form: &lt;code>function(compareValue, toValue, context){return {Boolean}}&lt;/code>. The context is an object holding the &lt;em>global&lt;/em>, &lt;em>current&lt;/em> and &lt;em>questions&lt;/em> objects.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="aggregation">Aggregation&lt;/h4>
&lt;p>Sometimes you will want a branch to be activated only if more than one condition is true, or in some other complex specific condition. For cases like this, the mixer supports aggregation. The mixer supports applying logical operations on conditions in the following way:&lt;/p>
&lt;p>An aggregator object has a single property, denoting the type of aggregation, holding an array of conditions to aggregate. The following condition will only be true if &lt;code>cond1&lt;/code> and &lt;code>cond2&lt;/code> are both true:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">cond&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">and&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">cond1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">cond2&lt;/span>&lt;span style="color:#000;font-weight:bold">]};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The mixer supports several types of aggregators:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Aggregator&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>and&lt;/td>
&lt;td>If all conditions are true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>or&lt;/td>
&lt;td>If at least one condition is true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>nor&lt;/td>
&lt;td>If all conditions are false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>nand&lt;/td>
&lt;td>If at least one condition is false&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>By default, if the mixer runs into an array instead of an object, it will treat it as an &lt;code>and&lt;/code> aggregator and be true only if all conditions within the array are true.&lt;/p>
&lt;p>Following are several examples for how to create different aggregations:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8f5902;font-style:italic">// cond1 &amp;amp;&amp;amp; cond2
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">conds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">cond1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">cond2&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// cond1 &amp;amp;&amp;amp; (cond2 || cond3)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">conds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">cond1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">or&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">cond2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">cond3&lt;/span>&lt;span style="color:#000;font-weight:bold">]}];&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// (cond1 &amp;amp;&amp;amp; cond2) || cond2
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">conds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[{&lt;/span>&lt;span style="color:#000">or&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[{&lt;/span>&lt;span style="color:#000">and&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">cond1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">cond2&lt;/span>&lt;span style="color:#000;font-weight:bold">]},&lt;/span>&lt;span style="color:#000">cond3&lt;/span>&lt;span style="color:#000;font-weight:bold">]}]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="templates">Templates&lt;/h3>
&lt;p>One of the ways to create dynamic questionnaires is using templates. Templates are a format that allows you to dynamically generate settings for your questions. You can replace any non-object setting from within your elements with a template, and it will be rendered according to the &lt;a href="#variables">environmental variables&lt;/a> (The exception to this rule is the &lt;code>inherit&lt;/code> setting that cannot use templates).&lt;/p>
&lt;p>A template is a string that has a section of the form &lt;code>&amp;lt;%= %&amp;gt;&lt;/code> in it. Within these brackets you can write any Javascript that you like and it will be evaluated and printed out. The player uses &lt;a href="http://lodash.com/docs#template">lodash templates&lt;/a> internally, you can look them up to see all the possible uses.&lt;/p>
&lt;p>The main use of templates is probably accessing local and global variables. For instance, in order to print the global variable &amp;ldquo;name&amp;rdquo;, you could create a template that looks like this: &lt;code>My name is &amp;lt;%= global.name%&amp;gt;&lt;/code>.&lt;/p>
&lt;p>Templates allow access only to a confined number of variables; These vary a bit between different tasks, but you can expect the templates to have access to the &lt;code>global&lt;/code> and &lt;code>current&lt;/code> objects. Element templates also have access to their own data property as {namespace}Data (so that trials will have a &lt;code>trialData&lt;/code> object, and stimuli a &lt;code>mediaData&lt;/code> property). Some objects have access to additional properties, you can find them in their respective documentation.&lt;/p>
&lt;h3 id="variables">Variables&lt;/h3>
&lt;p>Sometimes it is not enough to hard code behaviors into your tasks, sometimes you want behavior to depend on a previous response, or change your texts according to randomization. In order to support these behaviors you can use variables.&lt;/p>
&lt;h4 id="environmental-variables">Environmental Variables&lt;/h4>
&lt;p>The &lt;code>global&lt;/code> variable is the context of everything that happens within the task manager. It is an object that holds a property for each task that is run.
In addition, you as a user may extend it manually using the &lt;code>API.addGlobal&lt;/code> or &lt;code>API.addCurrent&lt;/code> functions. Any Task element can have the additional property &lt;code>addGlobal&lt;/code> or &lt;code>addCurrent&lt;/code> that get added to the global/current whenever that element is activated. This options is useful in various cases of branching.For advanced uses you can also access the global object directly by changing the &lt;code>window.piGlobal&lt;/code> object.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000">API&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addGlobal&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span>
&lt;span style="color:#000">value&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">123&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">variable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Each task creates an object associated with it that logs anything that happens within the task. In the duration of the task, this object can be accessed using the &lt;code>current&lt;/code> object. After the task ends, the object stays available from within the global object as &lt;code>global.taskName&lt;/code>, where &amp;ldquo;taskName&amp;rdquo; is the name associated with this specific task.
The task object is there for you to change. You can extend it to your hearts content using &lt;code>API.addCurrent&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000">API&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addCurrent&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span>
&lt;span style="color:#000">value&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">123&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">variable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Tasks add any data that they log into their task object. For instance, miQuest maintains a &lt;code>current.questions&lt;/code> object that holds the responses for all questions.&lt;/p>
&lt;h4 id="local-variables">Local Variables&lt;/h4>
&lt;p>In addition to these environmental variables, you have access to two types of local variables; &lt;em>Data&lt;/em> and &lt;em>Meta&lt;/em> . They are each available within the mixer/templates with specific names tied to their type. The naming convention for these variables is &lt;code>&amp;lt;elementName&amp;gt;Data&lt;/code> and &lt;code>&amp;lt;elementName&amp;gt;Meta&lt;/code>. For example, for tasks they appear as &lt;code>tasksData&lt;/code> and &lt;code>tasksMeta&lt;/code>.&lt;/p>
&lt;p>The elementNames for the various tasks are as follows:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Task&lt;/th>
&lt;th>elementName&lt;/th>
&lt;th>Object names&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>miManager&lt;/td>
&lt;td>tasks&lt;/td>
&lt;td>tasksData, tasksMeta&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>miQuest&lt;/td>
&lt;td>pages&lt;/td>
&lt;td>pagesData, pagesMeta&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>questions&lt;/td>
&lt;td>questionsData, questionsMeta&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>miTime&lt;/td>
&lt;td>trial&lt;/td>
&lt;td>trialData, trialMeta&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stimulus&lt;/td>
&lt;td>stimulusData, stimulusMeta&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>media&lt;/td>
&lt;td>mediaData, mediaMeta&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>If you set the data property of your elements, then they become available as the &lt;code>&amp;lt;elementName&amp;gt;Data&lt;/code> objects.&lt;/p>
&lt;p>Each element within the sequence gets a Meta object that holds automatically generated information regarding the location of the element within the sequence. It has two properties:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Property&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>number&lt;/td>
&lt;td>The serial number for this element within the sequence (i.e. 3 if this is the third element to be presented).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>outOf&lt;/td>
&lt;td>An attempt to estimate how many elements are in the sequence overall. This number cannot be fully trusted as the number of elements may be dynamically generated and depend on various variables not yet determined.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="inheritance">Inheritance&lt;/h3>
&lt;p>The inheritance system allows you to compose task elements based on previously defined prototypes.&lt;/p>
&lt;p>This behavior is often used for the abstraction of tasks; having the behavior of multiple elements defined at a single location. The other typical use, is for different types of randomizations.&lt;/p>
&lt;p>We will first cover the creation of prototype sets from which we can inherit. Then we will go over the actual inheritance behavior.&lt;/p>
&lt;h4 id="sets">Sets&lt;/h4>
&lt;p>Each element in the PI tasks can inherit its attributes from an element set.&lt;/p>
&lt;p>The element sets are defined using the &lt;code>addSet&lt;/code> functions defined in the &lt;a href="API.html">API&lt;/a>. Each element type has its own function (for example, &lt;code>addQuestionsSets&lt;/code> for miQuest).&lt;/p>
&lt;p>Each set holds an array of elements that can later be referred to as prototypes for new elements.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000">API&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addQuestionsSet&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;likert&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;selectOne&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">numericValues&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]);&lt;/span>
&lt;span style="color:#000">API&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addQuestionsSet&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;sizeLikert&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;likert&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">answers&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Big&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Medium&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Small&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that the name that you give the set (in the example: &lt;em>likert&lt;/em> or &lt;em>sizeLikert&lt;/em>) is the handle that you will later use to refer to it.&lt;/p>
&lt;h4 id="inheriting">Inheriting&lt;/h4>
&lt;p>Inheritance means that we use one element as the prototype, or parent, for another element.&lt;/p>
&lt;p>When inheriting an element, the child element starts out with all of the parent&amp;rsquo;s attributes and extends them with its own. This means that we use the parent element as a base and then copy in any properties that the child has, overwriting any existing properties.
One exception to this rule is the &lt;code>data&lt;/code> objects which we attempt to merge (giving precedence to the child).&lt;/p>
&lt;p>Follow this pseudo code:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8f5902;font-style:italic">// The parent page
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;jhon&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">family&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;doe&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">questions&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">quest1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">quest2&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// The child page which attempts to inherit the parent
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;parent&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;jack&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">questions&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">quest3&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// The result would be:
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// the child kept its own name but inherited the family name
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;jack&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">family&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;doe&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// the questions array was completely overwritten
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">questions&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">quest3&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order for an element to inherit another element it must use the &lt;code>inherit&lt;/code> property. &lt;code>inherit&lt;/code> takes an object or a string, with instructions for which element to inherit. If a string is used, the sequencer treats it as if it was a set name, and picks a random element from within that set.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;mySetName&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>property&lt;/th>
&lt;th>description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>set&lt;/td>
&lt;td>The name of the set from which we want to inherit.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>type&lt;/td>
&lt;td>The inheritance type - essentially how to pick from within the set (random by default, see &lt;a href="#type">docs&lt;/a>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>merge&lt;/td>
&lt;td>An array of property names that we want to merge instead of overwrite (see &lt;a href="#merge">docs&lt;/a>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>seed&lt;/td>
&lt;td>The randomization seed (see &lt;a href="#seed">docs&lt;/a>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>repeat&lt;/td>
&lt;td>Repeat the result of the last randomization (see &lt;a href="#repeat">docs&lt;/a>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>customize&lt;/td>
&lt;td>A function that can customize the element before it is used. This is an option only for advanced users, use this only if you really know what you are doing (seed &lt;a href="#customization">docs&lt;/a>)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="merge">Merge&lt;/h4>
&lt;p>By default, inheritance overwrites each property of the parent that the child already has. In order to change this behavior, you can add property names to the &lt;code>merge&lt;/code> array, and the sequencer will attempt to merge the data from the parent into the child.
This can look something like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8f5902;font-style:italic">// The parent page
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;parent&amp;#39;&lt;/span>
&lt;span style="color:#000">stimuli&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">stim1&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// The child page which attempts to inherit the parent
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;parent&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">merge&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;stimuli&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]},&lt;/span>
&lt;span style="color:#000">stimuli&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">stim2&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// The result would be:
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// the stimuli array was merged instead of overwritten
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">stimuli&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">stim1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">stim2&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="type">Type&lt;/h4>
&lt;p>We have implemented several types of inheritance:&lt;/p>
&lt;h5 id="random">random:&lt;/h5>
&lt;p>Randomly selects an element from the set (in case the set has only one element, the same element will always be selected, of course).&lt;/p>
&lt;ul>
&lt;li>&lt;code>'setName'&lt;/code>&lt;/li>
&lt;li>&lt;code>{set: 'setName'}&lt;/code>&lt;/li>
&lt;li>&lt;code>{set: 'setName', type:'random'}&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>This is the default inheritance type, so it is not obligatory to use the &lt;code>type&lt;/code> property. You can also use a short cut and set the &lt;code>set&lt;/code> using only its name, like we did in the example above&lt;/p>
&lt;h5 id="exrandom">exRandom:&lt;/h5>
&lt;p>Selects a random element without repeating the same element until we&amp;rsquo;ve gone through the whole set&lt;/p>
&lt;ul>
&lt;li>&lt;code>{set: 'setName', type:'exRandom'}&lt;/code>&lt;/li>
&lt;/ul>
&lt;h5 id="sequential">sequential:&lt;/h5>
&lt;p>Selects the elements by the order they were inserted into the set&lt;/p>
&lt;ul>
&lt;li>&lt;code>{set: 'setName', type:'sequential'}&lt;/code>&lt;/li>
&lt;/ul>
&lt;h5 id="bydata">byData:&lt;/h5>
&lt;p>Selects a specific element from the set.
We compare the &lt;code>data&lt;/code> property to the &lt;code>element.data&lt;/code> property and if &lt;code>data&lt;/code> is a subset of &lt;code>element.data&lt;/code> it selects the element (this means that if all properties of data property equal to the properties of the same name in element.data it is a fit).
This function will select only the first element to fit the data.
If the data property is set as a string, we assume it refers to the element handle.&lt;/p>
&lt;ul>
&lt;li>&lt;code>{set: 'setName', type: 'byData', data: {block:1, row:2}}&lt;/code> picks the element with both block:1 and row:2&lt;/li>
&lt;li>&lt;code>{set: 'setName', type: 'byData', data: &amp;quot;myStimHandle&amp;quot;}&lt;/code> picks the element that has the &amp;ldquo;myStimHandle&amp;rdquo; handle&lt;/li>
&lt;/ul>
&lt;h5 id="function">function:&lt;/h5>
&lt;p>You may also use a custom function to select your element (the function here, fully replaces the inherit object).&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">function&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">collection&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// The collection holds all the elements within the namespace you are querying.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Simply return the element you want to inherit.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="seed">Seed&lt;/h4>
&lt;p>The inheritance systems uses seeds to keep track of consecutive calls to the different types of inheritance. If you want to have parallel groups of inheritance to the same set, you can use seeds.
Each inheritance query automatically gets assigned to a &amp;ldquo;seed&amp;rdquo; that is used to track its progress. For example, the seed is used to keep track of the current element in the &lt;code>sequential&lt;/code> type inheritance.
Most of the time, the seed is transparent to the user, but sometimes it becomes useful to have manual control over the inheritance seed. For instance, if you want to reset an &lt;code>exRandom&lt;/code> inheritance - simply use &lt;code>exRandom&lt;/code> with a new seed. Same goes if you want to keep two instances of a &lt;code>sequential&lt;/code> inheritance.&lt;/p>
&lt;p>In the following example, both elements inherit exRandomly from the trials set. But the second element restarts the randomization.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;trials&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;exRandom&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">seed&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;block1&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;trials&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;exRandom&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">seed&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;block2&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Seeds are not confined to a specific set, and not even to a specific element type. Maybe a more interesting use, is to use the same seed across two different sets (you can see a real world application for this under the &lt;a href="#repeat">repeat&lt;/a> option).
It is important to take note that if you create custom seeds, it is your responsibility that they query sets of the same length. If you try to inherit two sets with different lengths the sequencer will throw an error.
In order to create a new seed all you have to do is set the &lt;code>seed&lt;/code> property with the new seeds name (String).&lt;/p>
&lt;h4 id="repeat">Repeat&lt;/h4>
&lt;p>Sometimes we have need to repeat a previous choice done by the inheritance picker (especially in cases of randomization). In order to do this, all you have to do is set the &lt;code>repeat&lt;/code> property to true.&lt;/p>
&lt;p>For instance, the following sequence will display a random element from the trials set twice.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;trials&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;trials&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;random&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">repeat&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>repeat&lt;/code> property can used within any type of randomization. We&amp;rsquo;ve seen a simple use, but its true power comes when combined with &lt;a href="#seeds">seeds&lt;/a>.&lt;/p>
&lt;p>The following example uses the same exRandom seed to pick a both a trial and the two stimuli associated with it (the n&lt;sup>th&lt;/sup> element in trials is always associated with the n&lt;sup>th&lt;/sup> elements of stimuli-1 and stimuli-2).&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;trials&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;exRandom&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">seed&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;mySeed&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">stimuli&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;stimuli-1&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;exRandom&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">seed&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;mySeed&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">repeat&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;stimuli-2&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;exRandom&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">seed&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;mySeed&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">repeat&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="customization">Customization&lt;/h4>
&lt;p>Each element can also define a &lt;code>customize&lt;/code> method, this method is called once the element is inherited but before it is activated.
It accepts two argument: the source element on which it is called, and the global object (in which you can find the current object etc.). The source element is also the context for the function.
You should make any changes that you want on the source element itself.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">inherit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;mySet&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">customize&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">function&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">element&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">global&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;span style="color:#000">element&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">questions&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">push&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">quest&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Variables</title><link>/docs/sequencer/variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sequencer/variables/</guid><description>
&lt;p>Sometimes it is not enough to hard code behaviors into your tasks,
sometimes you want behavior to depend on a previous response,
or change some texts according to randomization.
In order to achieve these behaviors you can use variables.&lt;/p>
&lt;p>We will first describe variables that are common across all tasks, and are always available - these are the &lt;code>global&lt;/code> and &lt;code>current&lt;/code> variables.
Then we will get down to variables variables that are available only in specific contexts - such as the &lt;code>data&lt;/code> and &lt;code>meta&lt;/code> variables.&lt;/p>
&lt;h3 id="accessing-variables">Accessing variables&lt;/h3>
&lt;p>There are many ways to use variables within the PI tasks.
You can learn about them in their respective documentation, check out &lt;a href="../mixer#conditions">conditions&lt;/a> and &lt;a href="../templates">templates&lt;/a>.
In addition, some of the variables can be accessed directly from your JavaScript, in cases that this is possible it will be mentioned in the description of the variable.&lt;/p></description></item></channel></rss>