<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Minno Suite â€“ Inheritance</title><link>/docs/sequencer/inheritance/</link><description>Recent content in Inheritance on Minno Suite</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="/docs/sequencer/inheritance/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: inheritanceAbstraction</title><link>/docs/sequencer/inheritance/inheritanceabstraction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sequencer/inheritance/inheritanceabstraction/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-inheritanceAbstraction.md">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
// One of the main uses for inheritance is simplifying your scripts.
// Instead of repeating the settings for your tasks, you can abstract them into a set and inherit them each time.
//
// Note that you can inherit from within sets as well, so that you can several levels of abstraction.
define([&amp;#39;managerAPI&amp;#39;], function(Manager){
var API = new Manager();
API.addTasksSet(&amp;#39;default&amp;#39;, [
{
type:&amp;#39;message&amp;#39;,
keys: &amp;#39; &amp;#39;
}
]);
// Instead of setting the task type and keys properties, we simply inherit the &amp;#39;default&amp;#39; task set.
// (Setting inherit to a String is equivalent to using random. This works for us because there is only one object within the &amp;#39;default&amp;#39; set.)
API.addSequence([
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 1&amp;#39;},
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 2&amp;#39;},
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 3&amp;#39;}
]);
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('inheritanceAbstraction.md');
&lt;/script></description></item><item><title>Docs: inheritanceByData</title><link>/docs/sequencer/inheritance/inheritancebydata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sequencer/inheritance/inheritancebydata/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-inheritanceByData.md">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
// Sometimes you need to handpick a specific object out of a set.
// `byData` allows you to do that by matching the `data` properties of the inherit object and the objects within the set.
// Note, that if there are multiple fits to your data object, a random object will be picked from among them.
define([&amp;#39;managerAPI&amp;#39;], function(Manager){
var API = new Manager();
API.addTasksSet(&amp;#39;default&amp;#39;, [
{
type:&amp;#39;message&amp;#39;,
keys: &amp;#39; &amp;#39;
}
]);
API.addTasksSet(&amp;#39;tasks&amp;#39;,[
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 1&amp;#39;, data:{num:1}},
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 2&amp;#39;, data:{num:2}},
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 3&amp;#39;, data:{num:3}}
]);
API.addSequence([
{inherit:{set:&amp;#39;tasks&amp;#39;, type:&amp;#39;byData&amp;#39;, data:{num:2}}},
{inherit:{set:&amp;#39;tasks&amp;#39;, type:&amp;#39;byData&amp;#39;, data:{num:1}}},
{inherit:{set:&amp;#39;tasks&amp;#39;, type:&amp;#39;byData&amp;#39;, data:{num:3}}}
]);
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('inheritanceByData.md');
&lt;/script></description></item><item><title>Docs: inheritanceCustom</title><link>/docs/sequencer/inheritance/inheritancecustom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sequencer/inheritance/inheritancecustom/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-inheritanceCustom.md">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
// Custom inheritance is only for advanced users. It allows you to pick objects by any criteria that you like.
define([&amp;#39;managerAPI&amp;#39;], function(Manager){
var API = new Manager();
API.addTasksSet(&amp;#39;default&amp;#39;, [
{
type:&amp;#39;message&amp;#39;,
keys: &amp;#39; &amp;#39;
}
]);
API.addTasksSet(&amp;#39;tasks&amp;#39;,[
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 1&amp;#39;},
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 2&amp;#39;},
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 3&amp;#39;}
]);
API.addSequence([
{inherit:function(collection){
return collection.at(2);
}}
]);
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('inheritanceCustom.md');
&lt;/script></description></item><item><title>Docs: inheritanceExRandom</title><link>/docs/sequencer/inheritance/inheritanceexrandom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sequencer/inheritance/inheritanceexrandom/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-inheritanceExRandom.md">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
// When you want to randomly pick from within a set without repeating any of the elements
// (When the sequencer runs out of elements in the set, it resets the randomization).
define([&amp;#39;managerAPI&amp;#39;], function(Manager){
var API = new Manager();
API.addTasksSet(&amp;#39;default&amp;#39;, [
{
type:&amp;#39;message&amp;#39;,
keys: &amp;#39; &amp;#39;
}
]);
API.addTasksSet(&amp;#39;tasks&amp;#39;,[
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 1&amp;#39;},
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 2&amp;#39;},
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 3&amp;#39;}
]);
API.addSequence([
{inherit:{set:&amp;#39;tasks&amp;#39;, type:&amp;#39;exRandom&amp;#39;}},
{inherit:{set:&amp;#39;tasks&amp;#39;, type:&amp;#39;exRandom&amp;#39;}},
{inherit:{set:&amp;#39;tasks&amp;#39;, type:&amp;#39;exRandom&amp;#39;}}
]);
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('inheritanceExRandom.md');
&lt;/script></description></item><item><title>Docs: inheritanceRandom</title><link>/docs/sequencer/inheritance/inheritancerandom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sequencer/inheritance/inheritancerandom/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-inheritanceRandom.md">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
// When a set has several objects you may want to inherit a random object out of that set.
// Note that you are not guaranteed that items will not be repeated when you randomly inherit (if that is what you want, use Exclusive Random: `exRandom`).
define([&amp;#39;managerAPI&amp;#39;], function(Manager){
var API = new Manager();
API.addTasksSet(&amp;#39;default&amp;#39;, [
{
type:&amp;#39;message&amp;#39;,
keys: &amp;#39; &amp;#39;
}
]);
API.addTasksSet(&amp;#39;tasks&amp;#39;,[
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 1&amp;#39;},
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 2&amp;#39;},
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 3&amp;#39;}
]);
API.addSequence([
{inherit:&amp;#39;tasks&amp;#39;}, // this is a shortcut that is equivalent to the full inherit random object.
{inherit:{set:&amp;#39;tasks&amp;#39;, type:&amp;#39;random&amp;#39;}},
{inherit:{set:&amp;#39;tasks&amp;#39;, type:&amp;#39;random&amp;#39;}}
]);
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('inheritanceRandom.md');
&lt;/script></description></item><item><title>Docs: inheritanceRepeat</title><link>/docs/sequencer/inheritance/inheritancerepeat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sequencer/inheritance/inheritancerepeat/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-inheritanceRepeat.md">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
// The inheritance systems uses seeds to keep track of consecutive calls to the different types of inheritance.
// If you want to have paralel groups of inhertiance to the same set, you can use seeds.
// This examples shows how to reset the `sequential` type, it works for `exRandom` as well...
define([&amp;#39;managerAPI&amp;#39;], function(Manager){
var API = new Manager();
API.addTasksSet(&amp;#39;default&amp;#39;, [
{
type:&amp;#39;message&amp;#39;,
keys: &amp;#39; &amp;#39;
}
]);
API.addTasksSet(&amp;#39;tasks&amp;#39;,[
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 1&amp;#39;},
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 2&amp;#39;},
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 3&amp;#39;}
]);
API.addTasksSet(&amp;#39;pairs&amp;#39;,[
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Pair 1&amp;#39;},
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Pair 2&amp;#39;},
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Pair 3&amp;#39;}
]);
API.addSequence([
{inherit:{set:&amp;#39;tasks&amp;#39;, type:&amp;#39;exRandom&amp;#39;, seed: &amp;#39;block1&amp;#39;}},
{inherit:{set:&amp;#39;pairs&amp;#39;, type:&amp;#39;exRandom&amp;#39;, seed: &amp;#39;block1&amp;#39;, repeat:true}},
{inherit:{set:&amp;#39;tasks&amp;#39;, type:&amp;#39;exRandom&amp;#39;, seed: &amp;#39;block1&amp;#39;}},
{inherit:{set:&amp;#39;pairs&amp;#39;, type:&amp;#39;exRandom&amp;#39;, seed: &amp;#39;block1&amp;#39;, repeat:true}},
{inherit:{set:&amp;#39;tasks&amp;#39;, type:&amp;#39;exRandom&amp;#39;, seed: &amp;#39;block1&amp;#39;}},
{inherit:{set:&amp;#39;pairs&amp;#39;, type:&amp;#39;exRandom&amp;#39;, seed: &amp;#39;block1&amp;#39;, repeat:true}}
]);
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('inheritanceRepeat.md');
&lt;/script></description></item><item><title>Docs: inheritanceSeed</title><link>/docs/sequencer/inheritance/inheritanceseed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sequencer/inheritance/inheritanceseed/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-inheritanceSeed.md">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
// The inheritance systems uses seeds to keep track of consecutive calls to the different types of inheritance.
// If you want to have parallel groups of inheritance to the same set, you can use seeds.
// This examples shows how to reset the `sequential` type, it works for `exRandom` as well...
// The options here are pretty endless, you should look into the documentation in order to get a better understanding of how this feature works.
define([&amp;#39;managerAPI&amp;#39;], function(Manager){
var API = new Manager();
API.addTasksSet(&amp;#39;default&amp;#39;, [
{
type:&amp;#39;message&amp;#39;,
keys: &amp;#39; &amp;#39;
}
]);
API.addTasksSet(&amp;#39;tasks&amp;#39;,[
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 1&amp;#39;},
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 2&amp;#39;},
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 3&amp;#39;}
]);
API.addSequence([
{inherit:{set:&amp;#39;tasks&amp;#39;, type:&amp;#39;sequential&amp;#39;, seed: &amp;#39;block1&amp;#39;}},
{inherit:{set:&amp;#39;tasks&amp;#39;, type:&amp;#39;sequential&amp;#39;, seed: &amp;#39;block1&amp;#39;}},
{inherit:{set:&amp;#39;tasks&amp;#39;, type:&amp;#39;sequential&amp;#39;, seed: &amp;#39;block2&amp;#39;}},
{inherit:{set:&amp;#39;tasks&amp;#39;, type:&amp;#39;sequential&amp;#39;, seed: &amp;#39;block2&amp;#39;}},
{inherit:{set:&amp;#39;tasks&amp;#39;, type:&amp;#39;sequential&amp;#39;, seed: &amp;#39;block2&amp;#39;}}
]);
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('inheritanceSeed.md');
&lt;/script></description></item><item><title>Docs: inheritanceSequential</title><link>/docs/sequencer/inheritance/inheritancesequential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sequencer/inheritance/inheritancesequential/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-inheritanceSequential.md">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
// When you want to go through a set by the order it was created.
define([&amp;#39;managerAPI&amp;#39;], function(Manager){
var API = new Manager();
API.addTasksSet(&amp;#39;default&amp;#39;, [
{
type:&amp;#39;message&amp;#39;,
keys: &amp;#39; &amp;#39;
}
]);
API.addTasksSet(&amp;#39;tasks&amp;#39;,[
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 1&amp;#39;},
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 2&amp;#39;},
{inherit:&amp;#39;default&amp;#39;, template:&amp;#39;Task 3&amp;#39;}
]);
API.addSequence([
{inherit:{set:&amp;#39;tasks&amp;#39;, type:&amp;#39;sequential&amp;#39;}},
{inherit:{set:&amp;#39;tasks&amp;#39;, type:&amp;#39;sequential&amp;#39;}},
{inherit:{set:&amp;#39;tasks&amp;#39;, type:&amp;#39;sequential&amp;#39;}}
]);
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('inheritanceSequential.md');
&lt;/script></description></item></channel></rss>