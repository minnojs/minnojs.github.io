<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Minno Suite â€“ Examples</title><link>/docs/quest/examples/</link><description>Recent content in Examples on Minno Suite</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="/docs/quest/examples/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Body weight</title><link>/docs/quest/examples/weight/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/quest/examples/weight/</guid><description>
&lt;p>The weight questionnaire is a solid example of how we create a fairly complex questionnaire.
It is heavily commented so that you can follow everything that goes on.
After reading the documentation feel free to download the file and modify it according to your needs.&lt;/p>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-weight.js">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
// ### Opening section
//
// The opening section of each script is always more or less the same.
// We create the wrapper for the script (`define`), and create a new instance of a questionnaire.
define([&amp;#39;questAPI&amp;#39;], function(Quest){
var API = new Quest();
// ### Creating page and questions sets
//
// The first thing we do in this script is create prototypes of the pages and questions that we will use.
// Many times (usually?), questionnaires use similar settings to describe the **pages** and **questions** in their studies.
// miQuest provides a system that allows us to prototype them so that our script may be shorter and easier to maintain
// (it&amp;#39;s better to make a change in one place and have it affect all your questions than having to go through each question and change it individually).
// It&amp;#39;s worth while to mention that it is not strictly necessary to use prototypes and inheritance,
// you can create your pages and questions from scratch from within the [sequence](API.html#sequence).
//
// The prototyping system uses `API.addPagesSet` and `API.addQuestionsSet` in order to create sets of prototypical pages/questions,
// later on we can `inherit` them into our sequence.
// Essentially, inheritance means that we use the object that we inherit as a base for the creation of a new object
// (see the [API](API.html#inheritance) for more details).
// #### Page prototype
// Here we create a prototype for the [pages](API.html#pages) in our group.
// The prototype belongs to a group that we arbitrarily call &amp;#39;basicPage&amp;#39;, we will later use this name in order to inherit this page.
// We will be using auto submit within the questions, so we disable the submit button for all pages (`noSubmit`).
// And finally we add a progress bar that will track the location of the participants within the questionnaire (`progressBar`).
/**
* Page prototype
*/
API.addPagesSet(&amp;#39;basicPage&amp;#39;,{
noSubmit:true,
progressBar: &amp;#39;&amp;lt;%= pagesMeta.number %&amp;gt; out of 15&amp;#39;
});
// Note the use of templates within the progress bar.
// Templates are strings that have the `&amp;lt;%= %&amp;gt;` delimiters, they allow you to access environmental variables,
// in this case we access the `pagesMeta` variable and get the current page number.
// You can use templates anywhere you like within miQuest.
// Both [templates](API.html#templates) and [environmental variables](API.html#variables) are fully documented within the API.
// #### Question prototypes
//
// We are going to use two types of [questions](API.html#questions) throughout this questionnaire, and we&amp;#39;ll create a prototype for each of them.
//
// The first question type is a simple [multiple choice input](API.html#selectone-selectmulti) (`type: &amp;#39;selelctOne&amp;#39;`).
// We set it to `autoSubmit` thus making the submit button redundant (autoSumit means that double clicking a response submits the page).
// Then we request `numericValues` so that the player logs the responses to questions as numbers instead of plain text.
// And finally we activate `help` for each of the questions and set the `helpText` for it.
// Note the use of templates again here to return a true/false value so that the help message is shown only on the first three pages.
/**
* Question prototypes
*/
API.addQuestionsSet(&amp;#39;basicSelect&amp;#39;,{
type: &amp;#39;selectOne&amp;#39;,
autoSubmit:true,
numericValues:true,
help: &amp;#39;&amp;lt;%= pagesMeta.number &amp;lt; 3 %&amp;gt;&amp;#39;, // show the help message only for the first three pages
helpText: &amp;#39;Selecting an answer once colors it blue.&amp;lt;br/&amp;gt;You can change your answer by selecting another option.&amp;lt;br/&amp;gt;To confirm, click the selected (blue) button a second time.&amp;#39;
});
// The second question is a another selectOne input. This time we use the multiButtons style.
// This is useful for questions with very many answers. Note the use of `minWidth` here, this allows us to set the width of the buttons, thus making sure they line up symmetrically.
API.addQuestionsSet(&amp;#39;basicDropdown&amp;#39;,{
type: &amp;#39;selectOne&amp;#39;,
style: &amp;#39;multiButtons&amp;#39;,
minWidth: &amp;#39;150px&amp;#39;,
autoSubmit:true,
numericValues:true
});
// ### The Sequence
//
// The sequence is an ordered list of all the pages that you want to present.
// This is where you tell miQuest how to interact with the participants.
// The sequence is created using the `API.addSequence` function which takes a single array of pages.
//
// This questionnaire has several demographic/personal questions that appear at the beginning in a constant order.
// After them we have a series of general questions that appear in a randomized order.
API.addSequence([
// #### Personal questions segment
//
// This segment has 6 demographic/personal questions.
// They are simply listed consecutively within the sequence array.
//
// Each page inherits the *basicPage* prototype that we defined previously (`inherit`) and manually create the questions for it.
// Each page has one question set into into it, inheriting either from the *basicSelect* or *basicDropdown* sets.
// The questions each have a unique `name` set into them here as well
// as the `stem` which is the question itself
// and the `answers` array that holds the possible answers for multiple choice questions.
//
// The concept that you should keep in mind reading this code is that the inherit property extends each object with its parents properties,
// so that each page inherits the `noSubmit` that we set into the *basicPage* prototype.
{
inherit : &amp;#39;basicPage&amp;#39;,
questions : [{
inherit : &amp;#39;basicSelect&amp;#39;,
name: &amp;#39;weightpref&amp;#39;,
stem: &amp;#39;Which statement best describes you?&amp;#39;,
answers: [
&amp;#39;I strongly prefer Thin People to Fat People.&amp;#39;,
&amp;#39;I moderately prefer Thin People to Fat People.&amp;#39;,
&amp;#39;I slightly prefer Thin People to Fat People.&amp;#39;,
&amp;#39;I like Thin People and Fat People equally.&amp;#39;,
&amp;#39;I slightly prefer Fat People to Thin People.&amp;#39;,
&amp;#39;I moderately prefer Fat People to Thin People.&amp;#39;,
&amp;#39;I strongly prefer Fat People to Thin People.&amp;#39;
]
}]
},
{
inherit : &amp;#39;basicPage&amp;#39;,
questions : [{
inherit : &amp;#39;basicSelect&amp;#39;,
name: &amp;#39;tempfat&amp;#39;,
stem: &amp;#39;How warm or cold do you feel towards &amp;lt;b&amp;gt;fat people&amp;lt;/b&amp;gt;?&amp;#39;,
answers: [
&amp;#39;Extremely warm&amp;#39;,
&amp;#39;Very warm&amp;#39;,
&amp;#39;Moderately warm&amp;#39;,
&amp;#39;Somewhat warm&amp;#39;,
&amp;#39;Slightly warm&amp;#39;,
&amp;#39;Neither warm nor cold&amp;#39;,
&amp;#39;Slightly cold&amp;#39;,
&amp;#39;Somewhat cold&amp;#39;,
&amp;#39;Moderately cold&amp;#39;,
&amp;#39;Very cold&amp;#39;,
&amp;#39;Extremely cold&amp;#39;
]
}]
},
{
inherit : &amp;#39;basicPage&amp;#39;,
questions : [{
inherit : &amp;#39;basicSelect&amp;#39;,
name: &amp;#39;tempthin&amp;#39;,
stem: &amp;#39;How warm or cold do you feel towards &amp;lt;b&amp;gt;thin people&amp;lt;/b&amp;gt;?&amp;#39;,
answers: [
&amp;#39;Extremely warm&amp;#39;,
&amp;#39;Very warm&amp;#39;,
&amp;#39;Moderately warm&amp;#39;,
&amp;#39;Somewhat warm&amp;#39;,
&amp;#39;Slightly warm&amp;#39;,
&amp;#39;Neither warm nor cold&amp;#39;,
&amp;#39;Slightly cold&amp;#39;,
&amp;#39;Somewhat cold&amp;#39;,
&amp;#39;Moderately cold&amp;#39;,
&amp;#39;Very cold&amp;#39;,
&amp;#39;Extremely cold&amp;#39;
]
}]
},
{
inherit : &amp;#39;basicPage&amp;#39;,
questions : [{
inherit : &amp;#39;basicDropdown&amp;#39;,
name: &amp;#39;myheight&amp;#39;,
stem: &amp;#39;Please indicate your height by selecting the most accurate option.&amp;#39;,
answers: [
&amp;#39;3 ft 0 in :: 91 cm&amp;#39;,
&amp;#39;3 ft 1 in :: 94 cm&amp;#39;,
&amp;#39;3 ft 2 in :: 97 cm&amp;#39;,
&amp;#39;3 ft 3 in :: 99 cm&amp;#39;,
&amp;#39;3 ft 4 in :: 102 cm&amp;#39;,
&amp;#39;3 ft 5 in :: 104 cm&amp;#39;,
&amp;#39;3 ft 6 in :: 107 cm&amp;#39;,
&amp;#39;3 ft 7 in :: 109 cm&amp;#39;,
&amp;#39;3 ft 8 in :: 112 cm&amp;#39;,
&amp;#39;3 ft 9 in :: 114 cm&amp;#39;,
&amp;#39;3 ft 10 in :: 117 cm&amp;#39;,
&amp;#39;3 ft 11 in :: 119 cm&amp;#39;,
&amp;#39;4 ft 0 in :: 122 cm&amp;#39;,
&amp;#39;4 ft 1 in :: 124 cm&amp;#39;,
&amp;#39;4 ft 2 in :: 127 cm&amp;#39;,
&amp;#39;4 ft 3 in :: 130 cm&amp;#39;,
&amp;#39;4 ft 4 in :: 132 cm&amp;#39;,
&amp;#39;4 ft 5 in :: 135 cm&amp;#39;,
&amp;#39;4 ft 6 in :: 137 cm&amp;#39;,
&amp;#39;4 ft 7 in :: 140 cm&amp;#39;,
&amp;#39;4 ft 8 in :: 142 cm&amp;#39;,
&amp;#39;4 ft 9 in :: 145 cm&amp;#39;,
&amp;#39;4 ft 10 in :: 147 cm&amp;#39;,
&amp;#39;4 ft 11 in :: 150 cm&amp;#39;,
&amp;#39;5 ft 0 in :: 152 cm&amp;#39;,
&amp;#39;5 ft 1 in :: 155 cm&amp;#39;,
&amp;#39;5 ft 2 in :: 157 cm&amp;#39;,
&amp;#39;5 ft 3 in :: 160 cm&amp;#39;,
&amp;#39;5 ft 4 in :: 163 cm&amp;#39;,
&amp;#39;5 ft 5 in :: 165 cm&amp;#39;,
&amp;#39;5 ft 6 in :: 168 cm&amp;#39;,
&amp;#39;5 ft 7 in :: 170 cm&amp;#39;,
&amp;#39;5 ft 8 in :: 173 cm&amp;#39;,
&amp;#39;5 ft 9 in :: 175 cm&amp;#39;,
&amp;#39;5 ft 10 in :: 178 cm&amp;#39;,
&amp;#39;5 ft 11 in :: 180 cm&amp;#39;,
&amp;#39;6 ft 0 in :: 183 cm&amp;#39;,
&amp;#39;6 ft 1 in :: 185 cm&amp;#39;,
&amp;#39;6 ft 2 in :: 188 cm&amp;#39;,
&amp;#39;6 ft 3 in :: 191 cm&amp;#39;,
&amp;#39;6 ft 4 in :: 193 cm&amp;#39;,
&amp;#39;6 ft 5 in :: 196 cm&amp;#39;,
&amp;#39;6 ft 6 in :: 198 cm&amp;#39;,
&amp;#39;6 ft 7 in :: 201 cm&amp;#39;,
&amp;#39;6 ft 8 in :: 203 cm&amp;#39;,
&amp;#39;6 ft 9 in :: 206 cm&amp;#39;,
&amp;#39;6 ft 10 in :: 208 cm&amp;#39;,
&amp;#39;6 ft 11 in :: 211 cm&amp;#39;,
&amp;#39;7 ft 0 in :: 213 cm&amp;#39;,
&amp;#39;7 ft 1 in :: 216 cm&amp;#39;,
&amp;#39;7 ft 2 in :: 218 cm&amp;#39;,
&amp;#39;7 ft 3 in :: 221 cm&amp;#39;,
&amp;#39;7 ft 4 in :: 224 cm&amp;#39;,
&amp;#39;7 ft 5 in :: 226 cm&amp;#39;,
&amp;#39;7 ft 6 in :: 229 cm&amp;#39;,
&amp;#39;7 ft 7 in :: 231 cm&amp;#39;,
&amp;#39;7 ft 8 in :: 234 cm&amp;#39;,
&amp;#39;7 ft 9 in :: 236 cm&amp;#39;,
&amp;#39;7 ft 10 in :: 239 cm&amp;#39;,
&amp;#39;7 ft 11 in :: 241 cm&amp;#39;,
&amp;#39;8 ft 0 in :: 244 cm&amp;#39;,
&amp;#39;8 ft 1 in :: 246 cm&amp;#39;,
&amp;#39;8 ft 2 in :: 249 cm&amp;#39;,
&amp;#39;8 ft 3 in :: 251 cm&amp;#39;,
&amp;#39;8 ft 4 in :: 254 cm&amp;#39;,
&amp;#39;8 ft 5 in :: 257 cm&amp;#39;,
&amp;#39;8 ft 6 in:: 259 cm&amp;#39;
]
}]
},
{
inherit : &amp;#39;basicPage&amp;#39;,
questions : [{
inherit : &amp;#39;basicDropdown&amp;#39;,
name: &amp;#39;myweight&amp;#39;,
stem: &amp;#39;Please indicate your weight by selecting the most accurate option.&amp;#39;,
answers: [
&amp;#39;50 lb :: 23 kg&amp;#39;,
&amp;#39;55 lb :: 25 kg&amp;#39;,
&amp;#39;60 lb :: 27 kg&amp;#39;,
&amp;#39;65 lb :: 30 kg&amp;#39;,
&amp;#39;70 lb :: 32 kg&amp;#39;,
&amp;#39;75 lb :: 34 kg&amp;#39;,
&amp;#39;80 lb :: 36 kg&amp;#39;,
&amp;#39;85 lb :: 39 kg&amp;#39;,
&amp;#39;90 lb :: 41 kg&amp;#39;,
&amp;#39;95 lb :: 43 kg&amp;#39;,
&amp;#39;100 lb :: 45 kg&amp;#39;,
&amp;#39;105 lb :: 48 kg&amp;#39;,
&amp;#39;110 lb :: 50 kg&amp;#39;,
&amp;#39;115 lb :: 52 kg&amp;#39;,
&amp;#39;120 lb :: 55 kg&amp;#39;,
&amp;#39;125 lb :: 57 kg&amp;#39;,
&amp;#39;130 lb :: 59 kg&amp;#39;,
&amp;#39;135 lb :: 61 kg&amp;#39;,
&amp;#39;140 lb :: 64 kg&amp;#39;,
&amp;#39;145 lb :: 66 kg&amp;#39;,
&amp;#39;150 lb :: 68 kg&amp;#39;,
&amp;#39;155 lb :: 70 kg&amp;#39;,
&amp;#39;160 lb :: 73 kg&amp;#39;,
&amp;#39;165 lb :: 75 kg&amp;#39;,
&amp;#39;170 lb :: 77 kg&amp;#39;,
&amp;#39;175 lb :: 80 kg&amp;#39;,
&amp;#39;180 lb :: 82 kg&amp;#39;,
&amp;#39;185 lb :: 84 kg&amp;#39;,
&amp;#39;190 lb :: 86 kg&amp;#39;,
&amp;#39;195 lb :: 89 kg&amp;#39;,
&amp;#39;200 lb :: 91 kg&amp;#39;,
&amp;#39;205 lb :: 93 kg&amp;#39;,
&amp;#39;210 lb :: 95 kg&amp;#39;,
&amp;#39;215 lb :: 98 kg&amp;#39;,
&amp;#39;220 lb :: 100 kg&amp;#39;,
&amp;#39;225 lb :: 102 kg&amp;#39;,
&amp;#39;230 lb :: 105 kg&amp;#39;,
&amp;#39;235 lb :: 107 kg&amp;#39;,
&amp;#39;240 lb :: 109 kg&amp;#39;,
&amp;#39;245 lb :: 111 kg&amp;#39;,
&amp;#39;250 lb :: 114 kg&amp;#39;,
&amp;#39;255 lb :: 116 kg&amp;#39;,
&amp;#39;260 lb :: 118 kg&amp;#39;,
&amp;#39;265 lb :: 120 kg&amp;#39;,
&amp;#39;270 lb :: 123 kg&amp;#39;,
&amp;#39;275 lb :: 125 kg&amp;#39;,
&amp;#39;280 lb :: 127 kg&amp;#39;,
&amp;#39;285 lb :: 130 kg&amp;#39;,
&amp;#39;290 lb :: 132 kg&amp;#39;,
&amp;#39;295 lb :: 134 kg&amp;#39;,
&amp;#39;300 lb :: 136 kg&amp;#39;,
&amp;#39;305 lb :: 139 kg&amp;#39;,
&amp;#39;310 lb :: 141 kg&amp;#39;,
&amp;#39;315 lb :: 143 kg&amp;#39;,
&amp;#39;320 lb :: 145 kg&amp;#39;,
&amp;#39;325 lb :: 148 kg&amp;#39;,
&amp;#39;330 lb :: 150 kg&amp;#39;,
&amp;#39;335 lb :: 152 kg&amp;#39;,
&amp;#39;340 lb :: 155 kg&amp;#39;,
&amp;#39;345 lb :: 157 kg&amp;#39;,
&amp;#39;350 lb :: 159 kg&amp;#39;,
&amp;#39;355 lb :: 161 kg&amp;#39;,
&amp;#39;360 lb :: 164 kg&amp;#39;,
&amp;#39;365 lb :: 166 kg&amp;#39;,
&amp;#39;370 lb :: 168 kg&amp;#39;,
&amp;#39;375 lb :: 170 kg&amp;#39;,
&amp;#39;380 lb :: 173 kg&amp;#39;,
&amp;#39;385 lb :: 175 kg&amp;#39;,
&amp;#39;390 lb :: 177 kg&amp;#39;,
&amp;#39;395 lb :: 180 kg&amp;#39;,
&amp;#39;400 lb :: 182 kg&amp;#39;,
&amp;#39;405 lb :: 184 kg&amp;#39;,
&amp;#39;410 lb :: 186 kg&amp;#39;,
&amp;#39;415 lb :: 189 kg&amp;#39;,
&amp;#39;420 lb :: 191 kg&amp;#39;,
&amp;#39;425 lb :: 193 kg&amp;#39;,
&amp;#39;430 lb :: 195 kg&amp;#39;,
&amp;#39;435 lb :: 198 kg&amp;#39;,
&amp;#39;440 lb :: 200 kg&amp;#39;,
&amp;#39;&amp;gt;440 lb :: &amp;gt;200kg&amp;#39;
]
}]
}, // end personal segment
// #### General questions segment
//
// This segment has several generic questions.
// As far as the questions are concerned it follows the same principle that the previous segment followed.
// The main difference is that we want to randomize the order in which the questions appear.
//
// The sequence offers a tool for controlling the flow of pages within the sequence (or questions within a page).
// Instead of putting pages in the sequence you may put objects called mixers that allow you to manipulate &amp;#34;sub sequences&amp;#34; in different ways.
// In this case we will be using the `random` mixer in order to randomize a sub sequence of pages.
//
// Just to get a better idea of what is going on here, you should know that mixers usually take the following form:
//
// ```javascript
// var mixer = {
// mixer : &amp;#39;random&amp;#39;, // the type of mixer that we should use
// data : [] // the subsequence to which we apply the mixer
// }
// ```
//
// In this case we wrap the pages that with general questions within the `data` property of a `type:&amp;#39;random&amp;#39;` mixer.
{
mixer: &amp;#39;random&amp;#39;,
data:[
{
inherit : &amp;#39;basicPage&amp;#39;,
questions : [{
inherit : &amp;#39;basicSelect&amp;#39;,
name: &amp;#39;mostpref&amp;#39;,
stem: &amp;#39;Do most people prefer fat people or thin people?&amp;#39;,
answers: [
&amp;#39;Most people strongly prefer Fat People to Thin People&amp;#39;,&amp;#39;Most people somewhat prefer Fat People to Thin People&amp;#39;,&amp;#39;Most people slightly prefer Fat People to Thin People&amp;#39;,&amp;#39;Most people like Fat People and Thin People equally &amp;#39;,&amp;#39;Most people slightly prefer Thin People to Fat People&amp;#39;, &amp;#39;Most people somewhat prefer Thin People to Fat People&amp;#39;,&amp;#39;Most people strongly prefer Thin People to Fat People&amp;#39;
]
}]
},
{
inherit : &amp;#39;basicPage&amp;#39;,
questions : [{
inherit : &amp;#39;basicSelect&amp;#39;,
name: &amp;#39;controlyou&amp;#39;,
stem: &amp;#39;How much control do you have over your weight?&amp;#39;,
answers: [
&amp;#39;Complete control&amp;#39;,&amp;#39;A lot of control&amp;#39;,&amp;#39;Some control &amp;#39;,&amp;#39;A little control&amp;#39;, &amp;#39;No control&amp;#39;
]
}]
},
{
inherit : &amp;#39;basicPage&amp;#39;,
questions : [{
inherit : &amp;#39;basicSelect&amp;#39;,
name: &amp;#39;controlother&amp;#39;,
stem: &amp;#39;How much control do people have over their weight?&amp;#39;,
answers: [
&amp;#39;Complete control&amp;#39;,&amp;#39;A lot of control&amp;#39;,&amp;#39;Some control &amp;#39;,&amp;#39;A little control&amp;#39;, &amp;#39;No control&amp;#39;
]
}]
},
{
inherit : &amp;#39;basicPage&amp;#39;,
questions : [{
inherit : &amp;#39;basicSelect&amp;#39;,
name: &amp;#39;iam&amp;#39;,
stem: &amp;#39;Currently, I am:&amp;#39;,
answers: [
&amp;#39;Very underweight&amp;#39;,&amp;#39;Moderately underweight&amp;#39;, &amp;#39;Slightly underweight&amp;#39;,&amp;#39;Neither underweight nor overweight&amp;#39;,&amp;#39;Slightly overweight&amp;#39;,&amp;#39;Moderately overweight&amp;#39;,&amp;#39;Very overweight&amp;#39;
]
}]
},
{
inherit : &amp;#39;basicPage&amp;#39;,
questions : [{
inherit : &amp;#39;basicSelect&amp;#39;,
name: &amp;#39;othersay&amp;#39;,
stem: &amp;#39;Other people would say that I am:&amp;#39;,
answers: [
&amp;#39;Very underweight&amp;#39;,&amp;#39;Moderately underweight&amp;#39;, &amp;#39;Slightly underweight&amp;#39;,&amp;#39;Neither underweight nor overweight&amp;#39;,&amp;#39;Slightly overweight&amp;#39;,&amp;#39;Moderately overweight&amp;#39;,&amp;#39;Very overweight&amp;#39;
]
}]
},
{
inherit : &amp;#39;basicPage&amp;#39;,
questions : [{
inherit : &amp;#39;basicSelect&amp;#39;,
name: &amp;#39;comptomost&amp;#39;,
stem: &amp;#39;Compared to most people I interact with, I am:&amp;#39;,
answers: [
&amp;#39;Much thinner&amp;#39;,&amp;#39;Moderately thinner&amp;#39;,&amp;#39;Slightly thinner&amp;#39;,&amp;#39;About the same&amp;#39;,&amp;#39;Slightly fatter&amp;#39;,&amp;#39;Moderately fatter&amp;#39;,&amp;#39;Much fatter&amp;#39;
]
}]
},
{
inherit : &amp;#39;basicPage&amp;#39;,
questions : [{
inherit : &amp;#39;basicSelect&amp;#39;,
name: &amp;#39;important&amp;#39;,
stem: &amp;#39;How important is your weight to your sense of who you are?&amp;#39;,
answers: [
&amp;#39;Not at all important&amp;#39;,&amp;#39;Slightly important&amp;#39;,&amp;#39;Moderately important&amp;#39;,&amp;#39;Very important&amp;#39;,&amp;#39;Extremely important&amp;#39;
]
}]
},
{
inherit : &amp;#39;basicPage&amp;#39;,
questions : [{
inherit : &amp;#39;basicSelect&amp;#39;,
name: &amp;#39;idfat&amp;#39;,
stem: &amp;#39;How much do you feel similar to people who are fat?&amp;#39;,
answers: [
&amp;#39;Not at all similar&amp;#39;,&amp;#39;Somewhat similar&amp;#39;,&amp;#39;Moderately similar&amp;#39;,&amp;#39;Very similar&amp;#39;,&amp;#39;Extremely similar&amp;#39;
]
}]
},
{
inherit : &amp;#39;basicPage&amp;#39;,
questions : [{
inherit : &amp;#39;basicSelect&amp;#39;,
name: &amp;#39;idthin&amp;#39;,
stem: &amp;#39;How much do you feel similar to people who are thin?&amp;#39;,
answers: [
&amp;#39;Not at all similar&amp;#39;,&amp;#39;Somewhat similar&amp;#39;,&amp;#39;Moderately similar&amp;#39;,&amp;#39;Very similar&amp;#39;,&amp;#39;Extremely similar&amp;#39;
]
}]
},
{
inherit : &amp;#39;basicPage&amp;#39;,
questions : [{
inherit : &amp;#39;basicSelect&amp;#39;,
name: &amp;#39;easytolose&amp;#39;,
stem: &amp;#39;How easy or difficult would it be for you to lose 5 to 10 pounds if you wanted to?&amp;#39;,
answers: [
&amp;#39;Very easy&amp;#39;,&amp;#39;Moderately easy&amp;#39;,&amp;#39;Somewhat easy&amp;#39;,&amp;#39;Somewhat difficult&amp;#39;,&amp;#39;Moderately difficult&amp;#39;,&amp;#39;Very difficult&amp;#39;
]
}]
}
]
}
// Now, we just close the sequence.
]);
// ### Closing section
//
// And finally, we close the script.
// Here again, all scripts look more or less the same.
// We return the `script` and close the `define` wrapper.
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('weight.js');
&lt;/script></description></item><item><title>Docs: bodyAwareness</title><link>/docs/quest/examples/bodyawareness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/quest/examples/bodyawareness/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-bodyAwareness.js">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
define([&amp;#39;questAPI&amp;#39;], function(Quest){
var API = new Quest();
// ### Questions
// Create the generic question template:
// * `autoSubmit`: submit when an answer is clicked twice.
// * `answers`: the text for all answers (in our case only the questions change...)
// * `help`: add help text (only for the first three questions presented).
API.addQuestionsSet(&amp;#39;basicSelect&amp;#39;, {
type: &amp;#39;selectOne&amp;#39;,
autoSubmit:true,
numericValues:true,
answers: [
&amp;#34;1- Not at all true about me&amp;#34;,
&amp;#34;2&amp;#34;,
&amp;#34;3&amp;#34;,
&amp;#34;4&amp;#34;,
&amp;#34;5&amp;#34;,
&amp;#34;6&amp;#34;,
&amp;#34;7 - Very true about me&amp;#34;
],
help: &amp;#39;&amp;lt;%= pagesMeta.number &amp;lt; 3 %&amp;gt;&amp;#39;,
helpText: &amp;#39;Selecting an answer once colors it blue.&amp;lt;br/&amp;gt;&amp;#39; &amp;#43;
&amp;#39;You can change your answer by selecting another option.&amp;lt;br/&amp;gt;&amp;#39; &amp;#43;
&amp;#39;To confirm, click the selected (blue) button a second time.&amp;#39;
});
// Create a set with all the questions that we are going to use.
// Each questions `inherit`s our *basicSelect*, sets a `name` and sets the questions text (`stem`).
API.addQuestionsSet(&amp;#39;baQuestions&amp;#39;, [
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ba1&amp;#39;,
stem : &amp;#34;I notice differences in the way my body reacts to various foods.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ba2&amp;#39;,
stem : &amp;#34;I can always tell when I bump myself whether or not it will become a bruise.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ba3&amp;#39;,
stem : &amp;#34;I always know when I&amp;#39;ve exerted myself to the point where I&amp;#39;ll be sore the next day.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ba4&amp;#39;,
stem : &amp;#34;I&amp;#39;m always aware of changes in my energy level when I eat certain foods.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ba5&amp;#39;,
stem : &amp;#34;I know in advance when I&amp;#39;m getting the flu.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ba6&amp;#39;,
stem : &amp;#34;I know I&amp;#39;m running a fever without taking my temperature.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ba7&amp;#39;,
stem : &amp;#34;I can distinguish between tiredness because of hunger and tiredness because of lack of sleep.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ba8&amp;#39;,
stem : &amp;#34;I can accurately predict what time of day lack of sleep will catch up with me.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ba9&amp;#39;,
stem : &amp;#34;I am aware of a cycle in my activity level throughout the day.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ba10&amp;#39;,
stem : &amp;#34;I &amp;lt;b&amp;gt;don&amp;#39;t&amp;lt;/b&amp;gt; notice seasonal rhythms and cycles in the way my body functions.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ba11&amp;#39;,
stem : &amp;#34;As soon as I wake up in the morning I know how much energy I&amp;#39;ll have during the day.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ba12&amp;#39;,
stem : &amp;#34;I can tell when I go to bed how well I will sleep that night.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ba13&amp;#39;,
stem : &amp;#34;I notice distinct body reactions when I am fatigued.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ba14&amp;#39;,
stem : &amp;#34;I notice specific body responses to changes in the weather.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ba15&amp;#39;,
stem : &amp;#34;I can predict how much sleep I will need at night in order to wake up refreshed.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ba16&amp;#39;,
stem : &amp;#34;When my exercise habits change, I can predict very accurately how that will affect my energy level.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ba17&amp;#39;,
stem : &amp;#34;There seems to be a best time for me to go to sleep at night.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ba18&amp;#39;,
stem : &amp;#34;I notice specific bodily reactions to being overhungry.&amp;#34;
}
]);
// ### Pages
// Create the generic pages template:
// * `decline`: allow participants to decline answering
// * `noSubmit`: do not display the submit button (we rely on `autoSubmit` for submitting)
API.addPagesSet(&amp;#39;basicPage&amp;#39;, {
progressBar: &amp;#39;&amp;lt;%= pagesMeta.number %&amp;gt; out of 18&amp;#39;,
header: &amp;#39;Please rate your agreement with the following statement&amp;#39;,
headerStyle : {&amp;#39;font-size&amp;#39;:&amp;#39;1em&amp;#39;},
questions : {inherit:{set:&amp;#39;baQuestions&amp;#39;, type:&amp;#39;exRandom&amp;#39;}},
decline:true,
noSubmit:true
});
// ### Sequence
// We use a simple mixer here to repeat a simple page that inherits from the basicPage.
// The basic page randomly inherits a question, therfore we get a different question for every page.
// We use exRandom in the basicPage page so that questions don&amp;#39;t randomly appear more than once.
API.addSequence([
{
mixer : &amp;#39;repeat&amp;#39;,
times : 18,
data : [
{inherit : &amp;#39;basicPage&amp;#39;}
]
}
]);
// Return the script to piquest&amp;#39;s god, or something of that sort.
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('bodyAwareness.js');
&lt;/script></description></item><item><title>Docs: buttons</title><link>/docs/quest/examples/buttons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/quest/examples/buttons/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-buttons.js">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
define([&amp;#39;questAPI&amp;#39;], function(Quest){
var API = new Quest();
// ### Questions
API.addQuestionsSet(&amp;#39;basicSelect&amp;#39;,{
type: &amp;#39;selectOne&amp;#39;,
autoSubmit:true,
numericValues:true,
required:true,
style:&amp;#39;multiButtons&amp;#39;,
errorMsg: {
required: &amp;#34;Please select an answer, or click &amp;#39;decline to answer&amp;#39;&amp;#34;
},
answers : [
&amp;#39;1 - Extremely negative&amp;#39;,
&amp;#39;2&amp;#39;,
&amp;#39;3&amp;#39;,
&amp;#39;4&amp;#39;,
&amp;#39;5&amp;#39;,
&amp;#39;6&amp;#39;,
&amp;#39;7&amp;#39;,
&amp;#39;8&amp;#39;,
&amp;#39;9 - Extremely positive&amp;#39;
],
help: &amp;#39;&amp;lt;%= pagesMeta.number &amp;lt; 3 %&amp;gt;&amp;#39;,
helpText: &amp;#39;Selecting an answer once colors it blue.&amp;lt;br/&amp;gt;You can change your answer by selecting another option.&amp;lt;br/&amp;gt;To confirm, click the selected (blue) button a second time.&amp;#39;
});
API.addQuestionsSet(&amp;#39;people&amp;#39;,[
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;Obama&amp;#39;,
stem : &amp;#39;What are your feelings toward Barack Obama?&amp;#39;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;Beyonce&amp;#39;,
stem : &amp;#39;What are your feelings toward Beyonce Knowles?&amp;#39;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;Colbert&amp;#39;,
stem : &amp;#39;What are your feelings toward Stephen Colbert?&amp;#39;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;Letterman&amp;#39;,
stem : &amp;#39;What are your feelings toward David Letterman?&amp;#39;
}
]);
// ### Pages
API.addPagesSet(&amp;#39;basicPage&amp;#39;,
{
progressBar: &amp;#39;&amp;lt;%= pagesMeta.number %&amp;gt; out of 4&amp;#39;,
questions : {inherit:{set:&amp;#39;people&amp;#39;, type:&amp;#39;exRandom&amp;#39;}}, //One question in the page, selected randomly (exhaustive)
v1style:2,
decline:true,
numbered: false
});
// ### Sequence
API.addSequence(
[
{
mixer : &amp;#39;repeat&amp;#39;,
times : 4,
data :
[
{inherit : &amp;#39;basicPage&amp;#39;}
]
}
]);
/**
Return the script to piquest&amp;#39;s god, or something of that sort.
**/
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('buttons.js');
&lt;/script></description></item><item><title>Docs: buttonsAdvanced</title><link>/docs/quest/examples/buttonsadvanced/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/quest/examples/buttonsadvanced/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-buttonsAdvanced.js">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
define([&amp;#39;questAPI&amp;#39;], function(Quest){
var API = new Quest();
// ### Setup
// Set the baseURL for use within images
API.addCurrent({baseURL:&amp;#39;../../images/&amp;#39;});
// ### Questions
// Use variables from the data property to create the name and stem.
// The idea is that this question will be inherited by many other questions.
// Those questions will set the name and stem by setting variables into the data property (see example below).
API.addQuestionsSet(&amp;#39;basicSelect&amp;#39;,
{
type: &amp;#39;selectOne&amp;#39;,
autoSubmit:true,
numericValues:true,
required:true,
style:&amp;#39;multiButtons&amp;#39;,
name:&amp;#39;&amp;lt;%=questionsData.trait%&amp;gt;.&amp;lt;%=questionsData.firstName%&amp;gt;.&amp;lt;%=questionsData.lastName%&amp;gt;&amp;#39;,
stem : &amp;#39;How &amp;lt;%=questionsData.trait%&amp;gt; or &amp;lt;%=questionsData.untrait%&amp;gt; do you think that &amp;lt;%=questionsData.firstName%&amp;gt; &amp;lt;%=questionsData.lastName%&amp;gt; is?&amp;#39;,
errorMsg: {
required: &amp;#34;Please select an answer, or click &amp;#39;decline to answer&amp;#39;&amp;#34;
},
answers : [
&amp;#39;1 - Extremely &amp;lt;%=questionsData.untrait%&amp;gt;&amp;#39;,
&amp;#39;2&amp;#39;,
&amp;#39;3&amp;#39;,
&amp;#39;4&amp;#39;,
&amp;#39;5&amp;#39;,
&amp;#39;6&amp;#39;,
&amp;#39;7&amp;#39;,
&amp;#39;8&amp;#39;,
&amp;#39;9 - Extremely &amp;lt;%=questionsData.trait%&amp;gt;&amp;#39;
],
help: &amp;#39;&amp;lt;%= pagesMeta.number &amp;lt; 3 %&amp;gt;&amp;#39;,
helpText: &amp;#39;Selecting an answer once colors it blue.&amp;lt;br/&amp;gt;You can change your answer by selecting another option.&amp;lt;br/&amp;gt;To confirm, click the selected (blue) button a second time.&amp;#39;
});
// Create questions that inherit basicSelect and set the name of the target person.
API.addQuestionsSet(&amp;#39;people&amp;#39;,
[
{
inherit : &amp;#39;basicSelect&amp;#39;,
data : {firstName : &amp;#39;Barack&amp;#39;, lastName : &amp;#39;Obama&amp;#39;}
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
data : {firstName : &amp;#39;Beyonce&amp;#39;, lastName : &amp;#39;Knowles&amp;#39;}
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
data : {firstName : &amp;#39;Stephen&amp;#39;, lastName : &amp;#39;Colbert&amp;#39;}
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
data : {firstName : &amp;#39;David&amp;#39;, lastName : &amp;#39;Letterman&amp;#39;}
}
]);
// Create questions that inherit one of the people questions, and set a specific trait.
// Note that we use the seed property in order to inherit separately the people questions for each trait.
// If we don&amp;#39;t use seed, then the inheritance would be shared. Then, one trait might get the same target person.
API.addQuestionsSet(&amp;#39;traits&amp;#39;,
[
{
inherit : {set:&amp;#39;people&amp;#39;, type:&amp;#39;exRandom&amp;#39;, seed:&amp;#39;friendly&amp;#39;},
data : {trait:&amp;#39;friendly&amp;#39;, untrait:&amp;#39;unfriendly&amp;#39;}
},
{
inherit : {set:&amp;#39;people&amp;#39;, type:&amp;#39;exRandom&amp;#39;, seed:&amp;#39;likeable&amp;#39;},
data : {trait:&amp;#39;likeable&amp;#39;, untrait:&amp;#39;unlikeable&amp;#39;}
},
{
inherit : {set:&amp;#39;people&amp;#39;, type:&amp;#39;exRandom&amp;#39;, seed:&amp;#39;trustworthy&amp;#39;},
data : {trait:&amp;#39;trustworthy&amp;#39;, untrait:&amp;#39;untrustworthy&amp;#39;}
},
{
inherit : {set:&amp;#39;people&amp;#39;, type:&amp;#39;exRandom&amp;#39;, seed:&amp;#39;honest&amp;#39;},
data : {trait:&amp;#39;honest&amp;#39;, untrait:&amp;#39;dishonest&amp;#39;}
}
]);
// ### Pages
// Each time that it is ineherited, basicPage uses one of the four trait questions. Each trait question uses one of the four people.
API.addPagesSet(&amp;#39;basicPage&amp;#39;,
{
progressBar: &amp;#39;&amp;lt;%= pagesMeta.number %&amp;gt; out of 16&amp;#39;,
questions : {inherit:{set:&amp;#39;traits&amp;#39;, type:&amp;#39;exRandom&amp;#39;}},
v1style:2,
decline:true,
numbered: false
});
// ### Sequence
//Inherit the page 16 times.
//The question in the page will inherit each trait question four times,
//and each trait question will inherit the people questions four time.
//In that way, all four traits will appear with all four people, in random order.
API.addSequence(
[
{
mixer : &amp;#39;repeat&amp;#39;,
times : 16,
data :
[
{inherit : &amp;#39;basicPage&amp;#39;}
]
}
]);
/**
Return the script to piquest&amp;#39;s god, or something of that sort.
**/
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('buttonsAdvanced.js');
&lt;/script></description></item><item><title>Docs: buttonsOnePage</title><link>/docs/quest/examples/buttonsonepage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/quest/examples/buttonsonepage/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-buttonsOnePage.js">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
define([&amp;#39;questAPI&amp;#39;], function(Quest){
var API = new Quest();
// ### Questions
API.addQuestionsSet(&amp;#39;basicSelect&amp;#39;,
{
type: &amp;#39;selectOne&amp;#39;,
autoSubmit:false,
numericValues:true,
required:false,
style:&amp;#39;multiButtons&amp;#39;,
answers : [
&amp;#39;1 - Extremely negative&amp;#39;,
&amp;#39;2&amp;#39;,
&amp;#39;3&amp;#39;,
&amp;#39;4&amp;#39;,
&amp;#39;5&amp;#39;,
&amp;#39;6&amp;#39;,
&amp;#39;7&amp;#39;,
&amp;#39;8&amp;#39;,
&amp;#39;9 - Extremely positive&amp;#39;
]
});
API.addQuestionsSet(&amp;#39;people&amp;#39;,
[
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;Obama&amp;#39;,
stem : &amp;#39;Barack Obama&amp;#39;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;Beyonce&amp;#39;,
stem : &amp;#39;Beyonce Knowles&amp;#39;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;Colbert&amp;#39;,
stem : &amp;#39;Stephen Colbert&amp;#39;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;Letterman&amp;#39;,
stem : &amp;#39;David Letterman&amp;#39;
}
]);
// ### Pages
// Shows all four questions, but the order is random.
API.addPagesSet(&amp;#39;basicPage&amp;#39;,
{
progressBar: &amp;#39;&amp;lt;%= pagesMeta.number %&amp;gt; out of 4&amp;#39;,
header: &amp;#39;How positive or negative are your feelings toward the people listed below?&amp;#39;,
headerStyle : {&amp;#39;font-size&amp;#39;:&amp;#39;1em&amp;#39;},
questions : {
mixer : &amp;#39;repeat&amp;#39;,
times : 4,
data : [
{inherit:{set:&amp;#39;people&amp;#39;, type:&amp;#39;exRandom&amp;#39;}}
]
},
v1style:2,
decline:false,
numbered: false
});
// ### Sequence
API.addSequence(
[
{inherit : &amp;#39;basicPage&amp;#39;}
]);
/**
Return the script to piquest&amp;#39;s god, or something of that sort.
**/
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('buttonsOnePage.js');
&lt;/script></description></item><item><title>Docs: dependency</title><link>/docs/quest/examples/dependency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/quest/examples/dependency/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-dependency.js">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
define([&amp;#39;questAPI&amp;#39;], function(Quest){
var API = new Quest();
// ### Questions
API.addQuestionsSet(&amp;#39;basicSelect&amp;#39;,
{
type: &amp;#39;selectOne&amp;#39;,
autoSubmit:true,
numericValues:true,
required:true,
errorMsg: {
required: &amp;#34;Please select an answer, or click &amp;#39;decline to answer&amp;#39;&amp;#34;
},
help: &amp;#39;&amp;lt;%= pagesMeta.number &amp;lt; 3 %&amp;gt;&amp;#39;,
helpText: &amp;#39;Selecting an answer once colors it blue.&amp;lt;br/&amp;gt;You can change your answer by selecting another option.&amp;lt;br/&amp;gt;To confirm, click the selected (blue) button a second time.&amp;#39;
});
API.addQuestionsSet({
funnyChoice: [{
inherit: &amp;#39;basicSelect&amp;#39;,
name:&amp;#39;moreFunny&amp;#39;,
stem:&amp;#39;On avarage, who do you think are funnier, women or men?&amp;#39;,
answers : [&amp;#39;Men&amp;#39;, &amp;#39;Women&amp;#39;]
}],
funnyMen: [{
inherit: &amp;#39;basicSelect&amp;#39;,
name:&amp;#39;menMore&amp;#39;,
stem:&amp;#39;How much funnier do you think that men are in comparison to women?&amp;#39;,
answers : [&amp;#39;Extremely funneir&amp;#39;, &amp;#39;Moderately funnier&amp;#39;, &amp;#39;Slightly funnier&amp;#39;]
}],
funnyWomen: [{
inherit: &amp;#39;basicSelect&amp;#39;,
name:&amp;#39;womenMore&amp;#39;,
stem:&amp;#39;How much funnier do you think that women are in comparison to men?&amp;#39;,
answers : [&amp;#39;Extremely funneir&amp;#39;, &amp;#39;Moderately funnier&amp;#39;, &amp;#39;Slightly funnier&amp;#39;]
}]
});
// ### Pages
API.addPagesSet(&amp;#39;basicPage&amp;#39;,
{
progressBar: &amp;#39;&amp;lt;%= pagesMeta.number %&amp;gt; out of 2&amp;#39;,
headerStyle : {&amp;#39;font-size&amp;#39;:&amp;#39;1em&amp;#39;},
v1style:2,
decline:true,
numbered: false
});
// ### Sequence
API.addSequence(
[
//Present the first question
{inherit :&amp;#39;basicPage&amp;#39;, questions:{inherit:&amp;#39;funnyChoice&amp;#39;}},
//Select one of the two possible questions, based on the response to the previous question.
{
mixer : &amp;#39;multiBranch&amp;#39;,
branches: [
{
conditions: [
{compare: &amp;#39;current.questions.moreFunny.response&amp;#39;, to: 1}
],
data: [
{inherit :&amp;#39;basicPage&amp;#39;, questions:{inherit:&amp;#39;funnyMen&amp;#39;}}
]
},
{
conditions: [
{compare: &amp;#39;current.questions.moreFunny.response&amp;#39;, to: 2}
],
data: [
{inherit :&amp;#39;basicPage&amp;#39;, questions:{inherit:&amp;#39;funnyWomen&amp;#39;}}
]
}
]
}
]);
/**
Return the script to piquest&amp;#39;s god, or something of that sort.
**/
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('dependency.js');
&lt;/script></description></item><item><title>Docs: gridExample</title><link>/docs/quest/examples/gridexample/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/quest/examples/gridexample/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-gridExample.js">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
define([&amp;#39;questAPI&amp;#39;], function(Quest){
var API = new Quest();
// ### Questions
// Create the template
API.addQuestionsSet(&amp;#39;basicGrid&amp;#39;,
{
type: &amp;#39;grid&amp;#39;,
cellLabels:true,
rowStemHide: true,
checkboxType : &amp;#39;colorMark&amp;#39;,
required : true,
errorMsg: {
required: &amp;#34;Please select an answer.&amp;#34;
},
columnStemHide: true,
maxWidth:420,
name : &amp;#39;&amp;lt;%=questionsData.name%&amp;gt;&amp;#39;,
columns: [
{type:&amp;#39;text&amp;#39;, textProperty:&amp;#39;left&amp;#39;, css : {width:&amp;#39;13.5%&amp;#39;}},
{stem:&amp;#39;1&amp;#39;, css : {width:&amp;#39;7%&amp;#39;}},
{stem:&amp;#39;2&amp;#39;, css : {width:&amp;#39;7%&amp;#39;}},
{stem:&amp;#39;3&amp;#39;, css : {width:&amp;#39;7%&amp;#39;}},
{stem:&amp;#39;4&amp;#39;, css : {width:&amp;#39;7%&amp;#39;}},
{stem:&amp;#39;5&amp;#39;, css : {width:&amp;#39;7%&amp;#39;}},
{stem:&amp;#39;6&amp;#39;, css : {width:&amp;#39;7%&amp;#39;}},
{stem:&amp;#39;7&amp;#39;, css : {width:&amp;#39;7%&amp;#39;}},
{stem:&amp;#39;8&amp;#39;, css : {width:&amp;#39;7%&amp;#39;}},
{stem:&amp;#39;9&amp;#39;, css : {width:&amp;#39;7%&amp;#39;}},
{type:&amp;#39;text&amp;#39;, textProperty:&amp;#39;right&amp;#39;, css : {width:&amp;#39;13.5%&amp;#39;}}
],
rows: [
{left:&amp;#39;Unlikeable&amp;#39;, right:&amp;#39;Likeable&amp;#39;, name:&amp;#39;&amp;lt;%=questionsData.name%&amp;gt;.likeable&amp;#39;},
{left:&amp;#39;Untrustworthy&amp;#39;, right:&amp;#39;Trustworthy&amp;#39;, name:&amp;#39;&amp;lt;%=questionsData.name%&amp;gt;.trustworthy&amp;#39;},
{left:&amp;#39;Unfriendly&amp;#39;, right:&amp;#39;Friendly&amp;#39;, name:&amp;#39;&amp;lt;%=questionsData.name%&amp;gt;.friendly&amp;#39;}
]
});
// create the specific question instances instances
API.addQuestionsSet(&amp;#39;gridQuestions&amp;#39;,
[
{
inherit : &amp;#39;basicGrid&amp;#39;,
data : {name : &amp;#39;Barack&amp;#39;},
stem: &amp;#39;&amp;lt;br/&amp;gt;Please rate Barack Obama on the following traits&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;#39;
},
{
inherit : &amp;#39;basicGrid&amp;#39;,
data : {name : &amp;#39;Beyonce&amp;#39;},
stem: &amp;#39;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;Please rate Beyonce Knowles on the following traits&amp;lt;br/&amp;gt;&amp;#39;
}
]);
// ### Pages
API.addPagesSet(&amp;#39;basicPage&amp;#39;,
{
progressBar: &amp;#39;Page &amp;lt;%= pagesMeta.number %&amp;gt; out of 2&amp;#39;,
questions : {inherit:{set:&amp;#39;gridQuestions&amp;#39;, type:&amp;#39;exRandom&amp;#39;}},
v1style:2,
decline:true,
numbered: false
});
// ### Sequence
API.addSequence(
[
{
mixer : &amp;#39;repeat&amp;#39;,
times : 2,
data :
[
{inherit : &amp;#39;basicPage&amp;#39;}
]
}
]);
/**
Return the script to piquest&amp;#39;s god, or something of that sort.
**/
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('gridExample.js');
&lt;/script></description></item><item><title>Docs: liveDependency</title><link>/docs/quest/examples/livedependency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/quest/examples/livedependency/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-liveDependency.js">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
define([&amp;#39;questAPI&amp;#39;], function(Quest){
var API = new Quest();
// ### Questions
API.addQuestionsSet(&amp;#39;basicSelect&amp;#39;,
{
type: &amp;#39;selectOne&amp;#39;,
autoSubmit:true,
numericValues:true,
required:true,
errorMsg: {
required: &amp;#34;Please select an answer, or click &amp;#39;decline to answer&amp;#39;&amp;#34;
}
});
API.addQuestionsSet({
base: [{
inherit: &amp;#39;basicSelect&amp;#39;,
name:&amp;#39;base&amp;#39;,
stem:&amp;#39;Please select&amp;#39;,
answers : [&amp;#39;Men&amp;#39;, &amp;#39;Women&amp;#39;, &amp;#39;Other&amp;#39;]
}],
open: [{
type: &amp;#39;text&amp;#39;,
name:&amp;#39;other&amp;#39;,
stem:&amp;#39;How do you mean other?&amp;#39;
}]
});
// ### Pages
API.addPagesSet(&amp;#39;basicPage&amp;#39;,
{
progressBar: &amp;#39;&amp;lt;%= pagesMeta.number %&amp;gt; out of 3&amp;#39;,
headerStyle : {&amp;#39;font-size&amp;#39;:&amp;#39;1em&amp;#39;},
v1style:2,
decline:true,
numbered: false
});
// ### Sequence
API.addSequence(
[
{
inherit :&amp;#39;basicPage&amp;#39;,
questions:[
// always show this question
{inherit:&amp;#39;base&amp;#39;},
// this question should be shown only if &amp;#34;other was selected&amp;#34;
{
remix: true, // remix:true is neccessary so that the mixer is re-evaluated each time that the responses change
mixer:&amp;#39;branch&amp;#39;,
conditions: [
{compare: 3, to: &amp;#39;current.questions.base.response&amp;#39;}
],
data: [
{inherit:&amp;#39;open&amp;#39;}
]
}
]}
]);
/**
Return the script to piquest&amp;#39;s god, or something of that sort.
**/
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('liveDependency.js');
&lt;/script></description></item><item><title>Docs: nfc</title><link>/docs/quest/examples/nfc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/quest/examples/nfc/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-nfc.js">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
define([&amp;#39;questAPI&amp;#39;], function(Quest){
var API = new Quest();
// ### Questions
API.addQuestionsSet(&amp;#39;basicSelect&amp;#39;,
{
type: &amp;#39;selectOne&amp;#39;,
autoSubmit:true,
numericValues:true,
required:true,
errorMsg: {
required: &amp;#34;Please select an answer, or click &amp;#39;decline to answer&amp;#39;&amp;#34;
},
answers : [&amp;#39;Strongly disagree&amp;#39;, &amp;#39;Moderately disagree&amp;#39;, &amp;#39;Slightly disagree&amp;#39;, &amp;#39;Neutral&amp;#39;, &amp;#39;Slightly agree&amp;#39;, &amp;#39;Moderately agree&amp;#39;, &amp;#39;Strongly agree&amp;#39;],
help: &amp;#39;&amp;lt;%= pagesMeta.number &amp;lt; 3 %&amp;gt;&amp;#39;,
helpText: &amp;#39;Selecting an answer once colors it blue.&amp;lt;br/&amp;gt;You can change your answer by selecting another option.&amp;lt;br/&amp;gt;To confirm, click the selected (blue) button a second time.&amp;#39;
});
//Define the question texts.
API.addQuestionsSet(&amp;#39;nfc&amp;#39;,
[
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;nfc_c1&amp;#39;,
stem : &amp;#34;I do not usually consult many different opinions before forming my own view.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;nfc_c2&amp;#39;,
stem : &amp;#34;I feel irritated when one person disagrees with what everyone else in a group believes.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;nfc_d1&amp;#39;,
stem : &amp;#34;When I have made a decision, I feel relieved.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;nfc_a1&amp;#39;,
stem : &amp;#34;I feel uncomfortable when I donâ€™t understand the reason why an event occurred in my life.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;nfc_d2&amp;#39;,
stem : &amp;#34;When I am confronted with a problem, Iâ€™m dying to reach a solution very quickly.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;nfc_d3&amp;#39;,
stem : &amp;#34;I would quickly become impatient and irritated if I would not find a solution to a problem immediately.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;nfc_c3&amp;#39;,
stem : &amp;#34;I dislike questions which could be answered in many different ways.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;nfc_a2&amp;#39;,
stem : &amp;#34;I dislike it when a personâ€™s statement could mean many different things.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;nfc_p1&amp;#39;,
stem : &amp;#34;I donâ€™t like to be with people who are capable of unexpected actions.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;nfc_a3&amp;#39;,
stem : &amp;#34;I donâ€™t like situations that are uncertain.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;nfc_o1&amp;#39;,
stem : &amp;#34;I find that establishing a consistent routine enables me to enjoy life more.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;nfc_o2&amp;#39;,
stem : &amp;#34;I find that a well ordered life with regular hours suits my temperament.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;nfc_p2&amp;#39;,
stem : &amp;#34;I donâ€™t like to go into a situation without knowing what I can expect from it.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;nfc_p3&amp;#39;,
stem : &amp;#34;I dislike unpredictable situations.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;nfc_o3&amp;#39;,
stem : &amp;#34;I enjoy having a clear and structured mode of life.&amp;#34;
}
]);
// ### Pages
API.addPagesSet(&amp;#39;basicPage&amp;#39;,
{
progressBar: &amp;#39;&amp;lt;%= pagesMeta.number %&amp;gt; out of 16&amp;#39;,
header: &amp;#39;Please rate your agreement with the following statement&amp;#39;,
headerStyle : {&amp;#39;font-size&amp;#39;:&amp;#39;1em&amp;#39;},
questions : {inherit:{set:&amp;#39;nfc&amp;#39;, type:&amp;#39;exRandom&amp;#39;}}, //One question in the page, selected randomly (exhaustive)
v1style:2,
decline:true,
numbered: false
});
// ### Sequence
API.addSequence(
[
//Inherit the page 16 times. The page will inherit the nfc questions 16 times, thus presenting all 16 statements in random order.
{
mixer : &amp;#39;repeat&amp;#39;,
times : 16,
data :
[
{inherit : &amp;#39;basicPage&amp;#39;}
]
}
]);
/**
Return the script to piquest&amp;#39;s god, or something of that sort.
**/
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('nfc.js');
&lt;/script></description></item><item><title>Docs: openEnded</title><link>/docs/quest/examples/openended/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/quest/examples/openended/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-openEnded.js">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
define([&amp;#39;questAPI&amp;#39;], function(Quest){
var API = new Quest();
// ### Questions
API.addQuestionsSet(
{
email1 : [{
type: &amp;#39;text&amp;#39;,
name:&amp;#39;email1&amp;#39;,
stem: &amp;#39;Please leave your email address&amp;#39;,
required: true,
errorMsg: {
required: &amp;#34;Are you sure you don&amp;#39;t want to leave your email? Click Decline to Answer to skip without a response&amp;#34;
}
}],
email2 : [{
type: &amp;#39;text&amp;#39;,
name:&amp;#39;email2&amp;#39;,
stem: &amp;#39;Please confirm your email address&amp;#39;,
required: true,
errorMsg: {
required: &amp;#34;Are you sure you don&amp;#39;t want to confirm your email address? Click Decline to Answer to skip without a response&amp;#34;
}
}]
});
// ### Pages
API.addPagesSet(&amp;#39;basicPage&amp;#39;,
{
progressBar: &amp;#39;&amp;lt;%= pagesMeta.number %&amp;gt; out of 2&amp;#39;,
v1style:2,
decline:true,
numbered: false
});
// ### Sequence
API.addSequence(
[
{
inherit : &amp;#39;basicPage&amp;#39;,
questions : [{inherit:&amp;#39;email1&amp;#39;}]
},
{
inherit : &amp;#39;basicPage&amp;#39;,
questions : [{inherit:&amp;#39;email2&amp;#39;}]
}
]);
/**
Return the script to piquest&amp;#39;s god, or something of that sort.
**/
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('openEnded.js');
&lt;/script></description></item><item><title>Docs: openEndedLong</title><link>/docs/quest/examples/openendedlong/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/quest/examples/openendedlong/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-openEndedLong.js">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
define([&amp;#39;questAPI&amp;#39;], function(Quest){
var API = new Quest();
// ### Questions
API.addQuestionsSet(
{
vacation : [{
type: &amp;#39;textarea&amp;#39;,
name:&amp;#39;vacation&amp;#39;,
stem: &amp;#39;Please briefly describe your dream vacation&amp;#39;,
rows:4,
maxlength:350,
maxlengthLimit:true,
required: true,
errorMsg: {
required: &amp;#34;Are you sure you don&amp;#39;t want to describe your dream vacation? Click Decline to Answer to skip without a response&amp;#34;
}
}],
mondays : [{
type: &amp;#39;textarea&amp;#39;,
name:&amp;#39;mondays&amp;#39;,
stem: &amp;#39;Please explain why you do not like Mondays&amp;#39;,
rows:4,
maxlength:350,
maxlengthLimit:true,
required: true,
errorMsg: {
required: &amp;#34;Are you sure you don&amp;#39;t want to tell us why you don&amp;#39;t like Mondays? Click Decline to Answer to skip without a response&amp;#34;
}
}]
});
// ### Pages
API.addPagesSet(&amp;#39;basicPage&amp;#39;,
{
progressBar: &amp;#39;&amp;lt;%= pagesMeta.number %&amp;gt; out of 2&amp;#39;,
v1style:2,
decline:true,
numbered: false
});
// ### Sequence
API.addSequence(
[
{
mixer:&amp;#39;random&amp;#39;,
data :
[
{
inherit : &amp;#39;basicPage&amp;#39;,
questions : [{inherit:&amp;#39;vacation&amp;#39;}]
},
{
inherit : &amp;#39;basicPage&amp;#39;,
questions : [{inherit:&amp;#39;mondays&amp;#39;}]
}
]
}
]);
/**
Return the script to piquest&amp;#39;s god, or something of that sort.
**/
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('openEndedLong.js');
&lt;/script></description></item><item><title>Docs: playground</title><link>/docs/quest/examples/playground/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/quest/examples/playground/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-playground.js">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
define([&amp;#39;questAPI&amp;#39;], function(Quest){
var API = new Quest();
API.addSequence([
{
header: &amp;#39;Hello World&amp;#39;,
questions: [
{
type: &amp;#39;selectOne&amp;#39;,
stem: &amp;#39;What is you favorite color?&amp;#39;,
answers: [&amp;#39;red&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;green&amp;#39;]
}
]
}
]);
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('playground.js');
&lt;/script></description></item><item><title>Docs: rateImages</title><link>/docs/quest/examples/rateimages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/quest/examples/rateimages/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-rateImages.js">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
define([&amp;#39;questAPI&amp;#39;], function(Quest){
var API = new Quest();
// ### Setup
// Set the baseURL for use within images
API.addCurrent({baseURL:&amp;#39;../../images/&amp;#39;});
// ### Questions
API.addQuestionsSet(&amp;#39;basicSelect&amp;#39;,
{
type: &amp;#39;selectOne&amp;#39;,
autoSubmit:true,
numericValues:true,
required:true,
name: &amp;#39;&amp;lt;%=questionsData.imageName%&amp;gt;&amp;#39;,
stem: &amp;#39;&amp;lt;image src=&amp;#34;&amp;lt;%=current.baseURL%&amp;gt;&amp;lt;%=questionsData.imageName%&amp;gt;.jpg&amp;#34;&amp;gt;&amp;lt;/image&amp;gt;&amp;#39;,
answers : [&amp;#39;Extremely negative&amp;#39;, &amp;#39;Moderately negative&amp;#39;, &amp;#39;Slightly negative&amp;#39;, &amp;#39;Neutral&amp;#39;, &amp;#39;Slightly positive&amp;#39;, &amp;#39;Moderately positive&amp;#39;, &amp;#39;Extremely positive&amp;#39;],
help: &amp;#39;&amp;lt;%= pagesMeta.number &amp;lt; 3 %&amp;gt;&amp;#39;,
helpText: &amp;#39;Selecting an answer once colors it blue.&amp;lt;br/&amp;gt;You can change your answer by selecting another option.&amp;lt;br/&amp;gt;To confirm, click the selected (blue) button a second time.&amp;#39;
});
API.addQuestionsSet(&amp;#39;animals&amp;#39;,
[
{
inherit : &amp;#39;basicSelect&amp;#39;,
data : {imageName : &amp;#39;bunny&amp;#39;}
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
data : {imageName : &amp;#39;seal&amp;#39;}
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
data : {imageName : &amp;#39;shark&amp;#39;}
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
data : {imageName : &amp;#39;snake&amp;#39;}
}
]);
// ### Pages
API.addPagesSet(&amp;#39;basicPage&amp;#39;,
{
progressBar: &amp;#39;&amp;lt;%= pagesMeta.number %&amp;gt; out of 4&amp;#39;,
header: &amp;#39;How positive or negative are your feelings toward the animal presented below?&amp;#39;,
headerStyle : {&amp;#39;font-size&amp;#39;:&amp;#39;1em&amp;#39;},
questions : {inherit:{set:&amp;#39;animals&amp;#39;, type:&amp;#39;exRandom&amp;#39;}},
v1style:2,
decline:true,
numbered: false
});
// ### Sequence
API.addSequence(
[
{
mixer : &amp;#39;repeat&amp;#39;,
times : 4,
data :
[
{inherit : &amp;#39;basicPage&amp;#39;}
]
}
]);
/**
Return the script to piquest&amp;#39;s god, or something of that sort.
**/
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('rateImages.js');
&lt;/script></description></item><item><title>Docs: rateImagesSizes</title><link>/docs/quest/examples/rateimagessizes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/quest/examples/rateimagessizes/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-rateImagesSizes.js">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
define([&amp;#39;questAPI&amp;#39;], function(Quest){
var API = new Quest();
// ### Setup
// Set the baseURL for use within images
API.addCurrent({baseURL:&amp;#39;../../images/&amp;#39;});
// ### Questions
API.addQuestionsSet(&amp;#39;basicSelect&amp;#39;,
{
type: &amp;#39;selectOne&amp;#39;,
autoSubmit:true,
numericValues:true,
required:true,
name: &amp;#39;&amp;lt;%=questionsData.imageName%&amp;gt;&amp;#39;,
//Set the height of the image with the height property of the &amp;lt;image&amp;gt; HTML element.
stem: &amp;#39;&amp;lt;image height=&amp;#34;50px&amp;#34; src=&amp;#34;&amp;lt;%=current.baseURL%&amp;gt;&amp;lt;%=questionsData.imageName%&amp;gt;.jpg&amp;#34;&amp;gt;&amp;lt;/image&amp;gt;&amp;#39;,
answers : [&amp;#39;Extremely negative&amp;#39;, &amp;#39;Moderately negative&amp;#39;, &amp;#39;Slightly negative&amp;#39;, &amp;#39;Neutral&amp;#39;, &amp;#39;Slightly positive&amp;#39;, &amp;#39;Moderately positive&amp;#39;, &amp;#39;Extremely positive&amp;#39;],
help: &amp;#39;&amp;lt;%= pagesMeta.number &amp;lt; 3 %&amp;gt;&amp;#39;,
helpText: &amp;#39;Selecting an answer once colors it blue.&amp;lt;br/&amp;gt;You can change your answer by selecting another option.&amp;lt;br/&amp;gt;To confirm, click the selected (blue) button a second time.&amp;#39;
});
API.addQuestionsSet(&amp;#39;animals&amp;#39;,
[
{
inherit : &amp;#39;basicSelect&amp;#39;,
data : {imageName : &amp;#39;bunny&amp;#39;}
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
data : {imageName : &amp;#39;seal&amp;#39;}
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
data : {imageName : &amp;#39;shark&amp;#39;}
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
data : {imageName : &amp;#39;snake&amp;#39;}
}
]);
// ### Pages
API.addPagesSet(&amp;#39;basicPage&amp;#39;,
{
progressBar: &amp;#39;&amp;lt;%= pagesMeta.number %&amp;gt; out of 4&amp;#39;,
header: &amp;#39;How positive or negative are your feelings toward the animal presented below?&amp;#39;,
headerStyle : {&amp;#39;font-size&amp;#39;:&amp;#39;1em&amp;#39;},
questions : {inherit:{set:&amp;#39;animals&amp;#39;, type:&amp;#39;exRandom&amp;#39;}},
v1style:2,
decline:true,
numbered: false
});
// ### Sequence
API.addSequence(
[
{
mixer : &amp;#39;repeat&amp;#39;,
times : 4,
data :
[
{inherit : &amp;#39;basicPage&amp;#39;}
]
}
]);
/**
Return the script to piquest&amp;#39;s god, or something of that sort.
**/
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('rateImagesSizes.js');
&lt;/script></description></item><item><title>Docs: scaleWithFeedback</title><link>/docs/quest/examples/scalewithfeedback/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/quest/examples/scalewithfeedback/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-scaleWithFeedback.js">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
define([&amp;#39;questAPI&amp;#39;], function(Quest){
var API = new Quest();
// ### Questions
API.addQuestionsSet(&amp;#39;basicSelect&amp;#39;,
{
type: &amp;#39;selectOne&amp;#39;,
autoSubmit:true,
numericValues:true,
required:true,
errorMsg: {
required: &amp;#34;Please select an answer, or click &amp;#39;decline to answer&amp;#39;&amp;#34;
},
answers : [&amp;#39;Strongly disagree&amp;#39;, &amp;#39;Moderately disagree&amp;#39;, &amp;#39;Slightly disagree&amp;#39;, &amp;#39;Slightly agree&amp;#39;, &amp;#39;Moderately agree&amp;#39;, &amp;#39;Strongly agree&amp;#39;],
help: &amp;#39;&amp;lt;%= pagesMeta.number &amp;lt; 3 %&amp;gt;&amp;#39;,
helpText: &amp;#39;Selecting an answer once colors it blue.&amp;lt;br/&amp;gt;You can change your answer by selecting another option.&amp;lt;br/&amp;gt;To confirm, click the selected (blue) button a second time.&amp;#39;
});
API.addQuestionsSet(&amp;#39;rosenberg&amp;#39;,
[
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ros1&amp;#39;,
stem : &amp;#34;On the whole, I am satisfied with myself.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ros2&amp;#39;,
reverse:true,
stem : &amp;#34;At times, I think I am no good at all.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ros3&amp;#39;,
stem : &amp;#34;I feel that I have a number of good qualities.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ros4&amp;#39;,
stem : &amp;#34;I am able to do things as well as most other people.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ros5&amp;#39;,
reverse:true,
stem : &amp;#34;I feel I do not have much to be proud of.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ros6&amp;#39;,
reverse:true,
stem : &amp;#34;I certainly feel useless at times.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ros7&amp;#39;,
stem : &amp;#34;I feel that I&amp;#39;m a person of worth, at least on an equal plane with others.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ros8&amp;#39;,
reverse:true,
stem : &amp;#34;I wish I could have more respect for myself.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ros9&amp;#39;,
reverse:true,
stem : &amp;#34;All in all, I am inclined to feel that I am a failure.&amp;#34;
},
{
inherit : &amp;#39;basicSelect&amp;#39;,
name : &amp;#39;ros10&amp;#39;,
stem : &amp;#34;I take a positive attitude toward myself.&amp;#34;
}
]);
API.addQuestionsSet(&amp;#39;showme&amp;#39;, {
type: &amp;#39;selectOne&amp;#39;,
autoSubmit:true,
stem:&amp;#39;Click next to see your self-esteem score&amp;#39;,
name:&amp;#39;next&amp;#39;,
answers : [&amp;#39;ok&amp;#39;],
onSubmit : function(log, current){
var sum=0, count=0, prop, response;
// for each question (that has a response and begings with &amp;#34;ros&amp;#34;) add to sum
for (prop in current.questions){
response = current.questions[prop].response;
if (response &amp;&amp; /^ros/.test(prop)) {
sum &amp;#43;= response;
count&amp;#43;=1;
}
}
if (count === 10){
current.selfEsteemScore = sum/10;
} else {
current.selfEsteemScore = &amp;#39;No score; You did not answer all the questions&amp;#39;;
}
}
});
API.addQuestionsSet(&amp;#39;score&amp;#39;, {
type: &amp;#39;selectOne&amp;#39;,
autoSubmit:true,
stem: &amp;#34;Your self-esteem score: &amp;lt;%=current.selfEsteemScore%&amp;gt;.&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;#34;&amp;#43;
&amp;#34;A score above 5 means you&amp;#39;re a douche; A score below 2 means you probably deserve more love than you give yourself.&amp;#34;,
name:&amp;#39;end&amp;#39;
});
// ### Pages
API.addPagesSet(&amp;#39;scalePage&amp;#39;,
{
progressBar: &amp;#39;&amp;lt;%= pagesMeta.number %&amp;gt; out of 10&amp;#39;,
header: &amp;#39;Please rate your agreement with the following statement&amp;#39;,
headerStyle : {&amp;#39;font-size&amp;#39;:&amp;#39;1em&amp;#39;},
questions : {inherit:{set:&amp;#39;rosenberg&amp;#39;, type:&amp;#39;exRandom&amp;#39;}},
v1style:2,
decline:true,
numbered: false
});
API.addPagesSet(&amp;#39;endPage&amp;#39;,
{
v1style:2,
decline:false,
numbered: false
});
// ### Sequence
API.addSequence(
[
{
mixer : &amp;#39;repeat&amp;#39;,
times : 10,
data :
[
{inherit : &amp;#39;scalePage&amp;#39;}
]
},
{
inherit:&amp;#39;endPage&amp;#39;,
questions:[{inherit:&amp;#39;showme&amp;#39;}]
},
{
inherit:&amp;#39;endPage&amp;#39;,
questions:[{inherit:&amp;#39;score&amp;#39;}]
}
]);
/**
Return the script to piquest&amp;#39;s god, or something of that sort.
**/
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('scaleWithFeedback.js');
&lt;/script></description></item><item><title>Docs: sliderExample</title><link>/docs/quest/examples/sliderexample/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/quest/examples/sliderexample/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-sliderExample.js">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
define([&amp;#39;questAPI&amp;#39;], function(Quest){
var API = new Quest();
// ### Questions
API.addQuestionsSet(&amp;#39;basicSlider&amp;#39;, {
type: &amp;#39;slider&amp;#39;,
steps:201, min: -100, max:100,
hidePips:true,
//showTicks:true,
highlight:true,
required:true,
maxWidth:&amp;#39;800px&amp;#39;,
errorMsg: {
required: &amp;#34;Please select an answer, or click &amp;#39;decline to answer&amp;#39;&amp;#34;
},
leftLabelCss : {color:&amp;#39;#8b2500&amp;#39;,&amp;#39;font-size&amp;#39;:&amp;#39;1.5em&amp;#39;},
rightLabelCss: {color:&amp;#39;#8b2500&amp;#39;,&amp;#39;font-size&amp;#39;:&amp;#39;1.5em&amp;#39;},
help: &amp;#39;&amp;lt;%= pagesMeta.number &amp;lt; 3 %&amp;gt;&amp;#39;,
helpText: &amp;#39;Click on the gray line to indicate your judgment. After clicking the line, you can slide the circle to choose the exact judgment.&amp;#39;,
labels : [&amp;#39;Extremely negative&amp;#39;, &amp;#39;Neutral&amp;#39;, &amp;#39;Extreme positive&amp;#39;]
});
API.addQuestionsSet(&amp;#39;people&amp;#39;, [
{
inherit : &amp;#39;basicSlider&amp;#39;,
name : &amp;#39;Obama&amp;#39;,
stem : &amp;#39;How positive or negative are your feelings toward Barack Obama?&amp;#39;
},
{
inherit : &amp;#39;basicSlider&amp;#39;,
name : &amp;#39;Beyonce&amp;#39;,
stem : &amp;#39;How positive or negative are your feelings toward Beyonce Knowles?&amp;#39;
},
{
inherit : &amp;#39;basicSlider&amp;#39;,
name : &amp;#39;Colbert&amp;#39;,
stem : &amp;#39;How positive or negative are your feelings toward Stephen Colbert?&amp;#39;
},
{
inherit : &amp;#39;basicSlider&amp;#39;,
name : &amp;#39;Letterman&amp;#39;,
stem : &amp;#39;How positive or negative are your feelings toward David Letterman?&amp;#39;
}
]);
// ### Pages
API.addPagesSet(&amp;#39;basicPage&amp;#39;, {
progressBar: &amp;#39;&amp;lt;%= pagesMeta.number %&amp;gt; out of 4&amp;#39;,
header: &amp;#39;How positive or negative are your feelings toward the animal presented below?&amp;#39;,
headerStyle : {&amp;#39;font-size&amp;#39;:&amp;#39;1em&amp;#39;},
questions : {inherit:{set:&amp;#39;people&amp;#39;, type:&amp;#39;exRandom&amp;#39;}}, //One question in the page, selected randomly (exhaustive)
v1style:2,
decline:true,
numbered: false
});
// ### Sequence
API.addSequence([
{
mixer : &amp;#39;repeat&amp;#39;,
times : 4,
data :
[
{inherit : &amp;#39;basicPage&amp;#39;}
]
}
]);
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('sliderExample.js');
&lt;/script></description></item><item><title>Docs: timer</title><link>/docs/quest/examples/timer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/quest/examples/timer/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-timer.js">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
define([&amp;#39;questAPI&amp;#39;], function(Quest){
var API = new Quest();
API.addSequence([
{ // page begins
header: &amp;#39;Question timer, &amp;#39;,
timer: {
duration: 10,
message: &amp;#39;You are out of time, lets move on.&amp;#39;
},
questions: [
{ // question begins
type: &amp;#39;selectOne&amp;#39;,
stem: &amp;#39;When you say good morning, what do you mean?&amp;#39;,
autoSubmit: true,
answers: [
&amp;#39;Do you wish me a good morning&amp;#39;,
&amp;#39;Or mean that it is a good morning whether I want it or not&amp;#39;,
&amp;#39;Or that you feel good this morning&amp;#39;,
&amp;#39;Or that it is a morning to be good on&amp;#39;,
&amp;#39;All of them at once&amp;#39;
],
help: true,
helpText: &amp;#39;Selecting an answer once colors it blue.&amp;lt;br/&amp;gt;&amp;#39; &amp;#43;
&amp;#39;You can change your answer by selecting another option.&amp;lt;br/&amp;gt;&amp;#39; &amp;#43;
&amp;#39;To confirm, click the selected (blue) button a second time.&amp;#39;
} // question ends
],
noSubmit: true
} // page ends
]);
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('timer.js');
&lt;/script></description></item><item><title>Docs: userPrevResp</title><link>/docs/quest/examples/userprevresp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/quest/examples/userprevresp/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-userPrevResp.js">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
define([&amp;#39;questAPI&amp;#39;], function(Quest){
var API = new Quest();
/**
* Questions
**/
API.addQuestionsSet(&amp;#39;basicSelect&amp;#39;,
{
type: &amp;#39;selectOne&amp;#39;,
autoSubmit:true,
numericValues:true,
required:true,
errorMsg: {
required: &amp;#34;Please select an answer, or click &amp;#39;decline to answer&amp;#39;&amp;#34;
},
help: &amp;#39;&amp;lt;%= pagesMeta.number &amp;lt; 3 %&amp;gt;&amp;#39;,
helpText: &amp;#39;Selecting an answer once colors it blue.&amp;lt;br/&amp;gt;You can change your answer by selecting another option.&amp;lt;br/&amp;gt;To confirm, click the selected (blue) button a second time.&amp;#39;
});
//Set the value of each response, to use it in the next question.
API.addQuestionsSet(&amp;#39;selectGroup&amp;#39;, [{
inherit: &amp;#39;basicSelect&amp;#39;,
name:&amp;#39;selectGroup&amp;#39;,
stem:&amp;#39;Please choose, who would you prefer to rate now?&amp;#39;,
answers : [
{text:&amp;#39;Black people&amp;#39;, value:&amp;#39;Black people&amp;#39;},
{text:&amp;#39;White people&amp;#39;, value:&amp;#39;White people&amp;#39;}
]
}]);
//The name of the group in this question is the response from the previous question.
API.addQuestionsSet(&amp;#39;groupLike&amp;#39;, [{
inherit: &amp;#39;basicSelect&amp;#39;,
name:&amp;#39;groupLike&amp;#39;,
stem:&amp;#39;How much do you like &amp;lt;%=current.questions.selectGroup.response%&amp;gt;?&amp;#39;,
answers : [&amp;#39;Extremely dislike&amp;#39;, &amp;#39;Moderately dislike&amp;#39;, &amp;#39;Slightly disklike&amp;#39;, &amp;#39;Slightly like&amp;#39;, &amp;#39;Moderaltey like&amp;#39;, &amp;#39;Extremely like&amp;#39;]
}]);
// ### Pages
API.addPagesSet(&amp;#39;basicPage&amp;#39;,
{
progressBar: &amp;#39;&amp;lt;%= pagesMeta.number %&amp;gt; out of 2&amp;#39;,
headerStyle : {&amp;#39;font-size&amp;#39;:&amp;#39;1em&amp;#39;},
v1style:2,
decline:true,
numbered: false
});
// ### Sequence
API.addSequence(
[
{inherit :&amp;#39;basicPage&amp;#39;, questions:{inherit:&amp;#39;selectGroup&amp;#39;}},
{inherit :&amp;#39;basicPage&amp;#39;, questions:{inherit:&amp;#39;groupLike&amp;#39;}}
]);
/**
Return the script to piquest&amp;#39;s god, or something of that sort.
**/
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('userPrevResp.js');
&lt;/script></description></item><item><title>Docs: usingImages</title><link>/docs/quest/examples/usingimages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/quest/examples/usingimages/</guid><description>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css" integrity="sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css" integrity="sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=" crossorigin="anonymous">
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js" integrity="sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=" crossorigin="anonymous">&lt;/script>
&lt;div class="pg-section" id="pg-usingImages.js">
&lt;p>
&lt;a class="pg-play btn btn-warning">&lt;i class="fas fa-play">&lt;/i> Run &lt;/a>
&lt;a class="pg-download btn btn-outline-warning">&lt;i class="fas fa-download">&lt;/i> Download &lt;/a>
&lt;/p>
&lt;textarea class="code-mirror" rows="40">
define([&amp;#39;questAPI&amp;#39;], function(Quest){
var API = new Quest();
// This is just a trick you can use in order to simplify the use of images;
// set the baseUrl into your current object, and use templates in order to inject them into your questions.
API.addCurrent({
baseURL: &amp;#39;../../images/&amp;#39;
});
// ### Questions
// Create the general structure of our questions
API.addQuestionsSet(&amp;#39;basicSelect&amp;#39;, {
type: &amp;#39;selectOne&amp;#39;,
autoSubmit:true,
numericValues:true,
help: &amp;#39;&amp;lt;%= pagesMeta.number &amp;lt; 3 %&amp;gt;&amp;#39;,
helpText: &amp;#39;Selecting an answer once colors it blue.&amp;lt;br/&amp;gt;&amp;#39; &amp;#43;
&amp;#39;You can change your answer by selecting another option.&amp;lt;br/&amp;gt;&amp;#39; &amp;#43;
&amp;#39;To confirm, click the selected (blue) button a second time.&amp;#39;
});
// ### Pages
// Create the generic pages template:
// * `decline`: allow participants to decline answering
// * `noSubmit`: do not display the submit button (we rely on `autoSubmit` for submitting)
API.addPagesSet(&amp;#39;basicPage&amp;#39;, {
progressBar: &amp;#39;&amp;lt;%= pagesMeta.number %&amp;gt; out of 3&amp;#39;,
headerStyle : {&amp;#39;font-size&amp;#39;:&amp;#39;1.2em&amp;#39;},
decline:true,
noSubmit:true
});
// ### Sequence
// We put the questions together within the sequence here.
// The stem here includes an image. It uses plain html, but this is a template you can definitely use yourself.
// Note that we use a template to set the baseUrl for the images, this is useful so that you can easily change the location of you images.
API.addSequence(
[
{
mixer : &amp;#39;random&amp;#39;,
data :[
{
inherit: &amp;#39;basicPage&amp;#39;,
header: &amp;#39;How much do you like this man?&amp;#39;,
questions: {
inherit: &amp;#39;basicSelect&amp;#39;,
name: &amp;#39;like&amp;#39;,
stem : &amp;#39;&amp;lt;h4&amp;gt;Chris&amp;lt;/h4&amp;gt;&amp;lt;img class=&amp;#34;img-responsive&amp;#34; src=&amp;#34;&amp;lt;%=current.baseURL%&amp;gt;face1.jpg&amp;#34;&amp;gt;&amp;#39;,
answers: [&amp;#34;Dislike extremely&amp;#34;, &amp;#34;Dislike moderately&amp;#34;, &amp;#34;Dislike slightly&amp;#34;,&amp;#34;Neither like or dislike&amp;#34;, &amp;#34;Like slightly&amp;#34;, &amp;#34;Like moderately&amp;#34;, &amp;#34;Like extremely&amp;#34;]
}
},
{
inherit: &amp;#39;basicPage&amp;#39;,
header: &amp;#39;How friendly do you think that this man is?&amp;#39;,
questions: {
inherit: &amp;#39;basicSelect&amp;#39;,
name: &amp;#39;friendly&amp;#39;,
stem : &amp;#39;&amp;lt;h4&amp;gt;Chris&amp;lt;/h4&amp;gt;&amp;lt;img class=&amp;#34;img-responsive&amp;#34; src=&amp;#34;&amp;lt;%=current.baseURL%&amp;gt;face1.jpg&amp;#34;&amp;gt;&amp;#39;,
answers: [&amp;#34;Extremely unfriendly&amp;#34;, &amp;#34;Moderately unfriendly&amp;#34;, &amp;#34;Slightly unfriendly&amp;#34;,&amp;#34;Neither friendly nor unfriendly&amp;#34;, &amp;#34;Slightly friendly&amp;#34;, &amp;#34;Moderately friendly&amp;#34;, &amp;#34;Extremely friendly&amp;#34;]
}
},
{
inherit: &amp;#39;basicPage&amp;#39;,
header: &amp;#39;How trustworthy do you think that this man is?&amp;#39;,
questions: {
inherit: &amp;#39;basicSelect&amp;#39;,
name: &amp;#39;trustworthy&amp;#39;,
stem : &amp;#39;&amp;lt;h4&amp;gt;Chris&amp;lt;/h4&amp;gt;&amp;lt;img class=&amp;#34;img-responsive&amp;#34; src=&amp;#34;&amp;lt;%=current.baseURL%&amp;gt;face1.jpg&amp;#34;&amp;gt;&amp;#39;,
answers: [&amp;#34;Extremely untrustworthy&amp;#34;, &amp;#34;Moderately untrustworthy&amp;#34;, &amp;#34;Slightly untrustworthy&amp;#34;,&amp;#34;Neither trustworthy nor untrustworthy&amp;#34;, &amp;#34;Slightly trustworthy&amp;#34;, &amp;#34;Moderately trustworthy&amp;#34;, &amp;#34;Extremely trustworthy&amp;#34;]
}
}
]
}
]);
// Return the script to piquest&amp;#39;s god, or something of that sort.
return API.script;
});
&lt;/textarea>
&lt;/div>
&lt;script>
(function(filename){
var win, section;
var section = document.getElementById('pg-' + filename);
var el = section.querySelector('.code-mirror');
var cm = CodeMirror.fromTextArea(el,{ theme:'monokai' });
cm.setSize(null, 500);
section.querySelector('.pg-download').addEventListener('click', function(){
var blob = new Blob([cm.getValue()], { type: 'text/javascript' });
if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
else {
var elem = window.document.createElement('a');
elem.href = window.URL.createObjectURL(blob);
elem.download = filename;
document.body.appendChild(elem);
elem.click();
document.body.removeChild(elem);
}
});
section.querySelector('.pg-play').addEventListener('click', function(){
var runminnoUrl = '\/runminno.html';
if (win) win.close();
win = window.open(runminnoUrl, 'Playground');
win.onload = function(){
win.addEventListener('unload', function() {
window.focus();
});
win.activate(cm.getValue());
};
});
})('usingImages.js');
&lt;/script></description></item></channel></rss>