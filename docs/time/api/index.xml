<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Minno Suite â€“ API</title><link>/docs/time/api/</link><description>Recent content in API on Minno Suite</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="/docs/time/api/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Settings</title><link>/docs/time/api/settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/time/api/settings/</guid><description>
&lt;p>Settings that apply to the whole task may be changed using &lt;code>API.addSettings&lt;/code>
(see &lt;a href="/docs/core/api">documentation&lt;/a>).
Following are the available settings.&lt;/p>
&lt;h4 id="logger">Logger&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000">logger&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">url&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;your/target/url&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">pulse&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">fullpath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">logger&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">function&lt;/span>&lt;span style="color:#000;font-weight:bold">(){&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// do your mojo here :)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The logger section is responsible for logging options.&lt;/p>
&lt;p>&lt;code>url&lt;/code>:
Is the url to which we send the logged data (ask your IT team what it should be). You should set this if you want to log your data&amp;hellip;&lt;/p>
&lt;p>&lt;code>pulse&lt;/code>:
After how many rows should we send data to the server.
In case the number of rows is reached during a trial, the player waits until the end of the trial and sends all the log rows it gathered at once.
Regardless of pulse, the player sends all remaining log rows at the end of the task.
This means that it is possible to get pulses holding more or less than &amp;ldquo;pulse&amp;rdquo; rows.
If pulse is not set (or is set to 0) the player will send all data at the end of the task.&lt;/p>
&lt;p>&lt;code>fullpath&lt;/code>:
When using the media path to log media elements (for images and templates), should we use the full path or just the filename (&lt;code>false&lt;/code> by default)&lt;/p>
&lt;p>&lt;code>meta&lt;/code>:
An object that is used to extend each logged row. This is useful in case you want to add some global data to the posts (such as server generated user id, or task name).&lt;/p>
&lt;p>&lt;code>logger&lt;/code>:
Accepts a function to replace the existing logging function. (don&amp;rsquo;t touch this if you don&amp;rsquo;t &lt;strong>realy&lt;/strong> know what you&amp;rsquo;re doing).
The logger function is called each time a log action is triggered (see interactions: actions &lt;a href="../task/actions">log&lt;/a>).
It is responsible for adding a logging row to be sent to the server.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">function&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">trialData&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">inputData&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">actionData&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">logStack&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// trialData: the data object from this trial
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// inputData: the input object that triggered this action
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// actionData: the action object that was triggered (it should look like {type:&amp;#39;log&amp;#39;, your:&amp;#39;custom property&amp;#39;})
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// logStack: an array with all previously logged rows
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// the context for this function (&amp;#34;this&amp;#34;) is the original trial object
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// the function should return an object to be pushed into the trial stack, and later be sent to the server
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is what the default logger looks like:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">function&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">trialData&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">inputData&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">actionData&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">logStack&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">stimList&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_stimulus_collection&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_stimlist&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">mediaList&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_stimulus_collection&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_medialist&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">log_serial&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">logStack&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">length&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">trial_id&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_id&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span>
&lt;span style="color:#000">responseHandle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">inputData&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">handle&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">latency&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87">Math&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">floor&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">inputData&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">latency&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000">stimuli&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">stimList&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">media&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">mediaList&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">trialData&lt;/span>
&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="canvas">Canvas&lt;/h4>
&lt;p>The canvas is the visable part of the player.
This section in the settings controls the shape and appearance of the canvas.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000">canvas&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">maxWidth&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">800&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">proportions&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.8&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By default Minno attempts to keep the canvas size proportional so that the relationship between stimuli stays consistent.
Therefore it attempts to take up as much screen space as posible while staying true to the &lt;strong>proportion&lt;/strong>.&lt;/p>
&lt;p>&lt;code>proportions&lt;/code>:
The proportion settings describes the relationship between the height and width of the canvas
(&lt;em>proportion = height/width&lt;/em>).
You can set it either directly as a number (i.e. &lt;code>0.8&lt;/code>) or more explicitly as an object (i.e. &lt;code>{width:5,height:4}&lt;/code>).&lt;br>
By default it is set to &lt;code>0.8&lt;/code>.&lt;/p>
&lt;p>&lt;code>maxWidth&lt;/code>:
The maximum width (in pixels) that the canvas may reach.
This value must be a plain number (i.e. &lt;code>800&lt;/code> and not &lt;code>'800px'&lt;/code>).
Note that if &lt;code>width&lt;/code> is set, then this property is ignored and the canvas size stays static.&lt;/p>
&lt;p>&lt;code>width&lt;/code>:
If width is set, then the canvas size is set to a constant width
(control the hight using the &lt;code>proportions&lt;/code> property).
This value must be a plain number (i.e. &lt;code>800&lt;/code> and not &lt;code>'800px'&lt;/code>).&lt;/p>
&lt;p>&lt;code>textSize&lt;/code>:
Controls the default font size in the canvas.
It takes a single number that represents font size in percentage of the canvas height (similar to the CSS3 &lt;code>vh&lt;/code> unit).
By default it is set to 3.
Any stimulus that sets font-size using a relative unit (percent/em) will be relative to this size.
Any stimulus that sets font-size using an absolute unit (px/pt) will be displayed according to the absolute unit.&lt;/p>
&lt;p>&lt;code>background&lt;/code>:
Controls the background color of the whole screen.&lt;/p>
&lt;p>&lt;code>canvasBackground&lt;/code>:
Controls the background color of the player canvas.&lt;/p>
&lt;p>&lt;code>borderWidth&lt;/code>:
Controls the width of the player canvas borders (in pixels).&lt;/p>
&lt;p>&lt;code>borderColor&lt;/code>:
Controls the color of the player canvas borders.&lt;/p>
&lt;p>&lt;code>css&lt;/code>:
Allows you to add any custom css to the canvas (using the jquery css &lt;a href="http://api.jquery.com/css/">API&lt;/a>).&lt;/p>
&lt;h4 id="base_url">Base_url&lt;/h4>
&lt;p>The &lt;code>base_url&lt;/code> section is responsible for loading images and templates. It allows the user to pick a base url from which to load all images and templates.
It accepts either an object setting the base url for images and templates or a string that will be used for both images and templates:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8f5902;font-style:italic">// object notation
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">base_url&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">image&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;images&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">template&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;templates/&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// string notation
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">base_url&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;media/&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="redirect">Redirect&lt;/h4>
&lt;p>The redirect setting decides where to redirect the player at the end of the task.
By default, the player simply refreshes the current page.
This option is not used if the endTask hook is set.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000">redirect&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;//my.domain.edu&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="hooks">Hooks&lt;/h4>
&lt;p>This option is deprecated, please use &lt;a href="#onend">&lt;code>onEnd&lt;/code>&lt;/a> instead.&lt;/p>
&lt;h4 id="onend">onEnd&lt;/h4>
&lt;p>A function to be called at the end of the task.
For example, the following setting logs the task logs to the console.&lt;/p>
&lt;pre>&lt;code>API.addSettings(`onEnd`, function(){
console.log(API.getCurrent().logs);
});
&lt;/code>&lt;/pre>&lt;h4 id="meta-data">Meta data&lt;/h4>
&lt;p>Meta data is data that should be returned with every request to the server.
Any key value pair in the meta data is added to every post the player makes to the server.
In order to create a post with three keys: json, session_id and task_id - you would write something like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000">metaData&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">session_id&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">9872356&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">task_id&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;43BTW78&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(the json field is the field that holds the player data it is created automaticaly)&lt;/p>
&lt;h4 id="preloadimages">preloadImages&lt;/h4>
&lt;p>There are times when you want to preload images manually, without relying on minno-time to recognize all your media automatically.
This can be if you are using complex &lt;code>html&lt;/code> type media that include images, or if you are using templates to set images.
In these cases there is a convenience setting that allows you to add your images to the preloading queue.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000">API&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addSettings&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;preloadImages&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;img1.jpg&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;img2.jpg&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;img3.jpg&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Media</title><link>/docs/time/api/media/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/time/api/media/</guid><description>
&lt;p>MinnoJS supports three types of media:&lt;/p>
&lt;ul>
&lt;li>Plain text: &lt;code>{word: 'Your very cool stimulus'}&lt;/code>&lt;/li>
&lt;li>HTML: &lt;code>{html: &amp;quot;&amp;lt;div&amp;gt;any html&amp;lt;/div&amp;gt;&amp;quot;}&lt;/code>&lt;/li>
&lt;li>Image: &lt;code>{image: 'some/url/image.png}&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>If you insert a string instead of a media object the player treats it as if it was Plain text.
The folowing two media definitions have the same outcome:&lt;code>'Wiki'&lt;/code>, &lt;code>{word:'Wiki'}&lt;/code>&lt;/p></description></item><item><title>Docs: Stimulus</title><link>/docs/time/api/stimuli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/time/api/stimuli/</guid><description>
&lt;p>Stimuli are responsible for &lt;em>how&lt;/em> we present the media.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">handle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;myStim&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">size&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">height&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">25&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">width&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">25&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000">location&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">left&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">25&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">top&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">75&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000">css&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">color&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;red&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;font-size&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;2em&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000">media&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">word&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Your very cool stimulus&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">myData&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;some info&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">myOtherData&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;some other info&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">nolog&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="handle">handle&lt;/h2>
&lt;p>Each trial may have multiple stimuli, and they are refered to by &lt;code>handle&lt;/code>.
This is how refer to this specific stimulus inside the player (i.e. if we want to hide or show it).
If more than one stimulus (per trial) has the same handle, all actions targeted at that handle will affect all stimuli.
You can set a stimulus handle either by setting the &lt;code>handle&lt;/code> property, or by setting &lt;code>handle&lt;/code> into the &lt;a href="/docs/sequencer/variables/local/">data object&lt;/a>.
Alternatively, if a stimulus is inherited from a set, the handle is defined by default as the set that the stimulus was inherited from.&lt;/p>
&lt;h2 id="size">size&lt;/h2>
&lt;p>The size of the stimulus in percentage of the player canvas. By default, size is set to {height:&amp;lsquo;auto&amp;rsquo;,width:&amp;lsquo;auto&amp;rsquo;}.&lt;/p>
&lt;h2 id="location">location&lt;/h2>
&lt;p>The location to display the stimulus, in percentage of the player canvas. Where &lt;code>left:20&lt;/code> means that the left border of the stimulus should be 20% from the left of the canvas. You may define any of &lt;code>left&lt;/code>/&lt;code>right&lt;/code>/&lt;code>top&lt;/code>/&lt;code>bottom&lt;/code> attributes.&lt;/p>
&lt;p>Instead of specifying percentages you may use the keyword &lt;code>center&lt;/code> in order to center the stimulus, or the keyword &lt;code>auto&lt;/code> in order to override any previous settings.
By default, location is set to &lt;code>{left:'center', right:'center',top:'center', bottom:'center'}&lt;/code>.&lt;/p>
&lt;h2 id="css">css&lt;/h2>
&lt;p>Accepts any jquery css object. (see the &lt;a href="http://api.jquery.com/css/">api&lt;/a> for details)&lt;/p>
&lt;h2 id="media">media&lt;/h2>
&lt;p>Defines the media associated with this stimulus.&lt;/p>
&lt;h2 id="touchmedia">touchMedia&lt;/h2>
&lt;p>An alternative media object to display in case we are on a touch device (by default, the regular media is used).&lt;/p>
&lt;h2 id="data">data&lt;/h2>
&lt;p>In addition to the basic attributes of the stimulus you may add any attribute you like as meta deta that will be available from within the player&lt;/p>
&lt;h2 id="nolog">nolog&lt;/h2>
&lt;p>If this attribute is set to true, this stimulus (and its associated media) will not be logged.
This is usefull for example for focus stimuli and feedback that are identical for all trials and do not need to be logged.&lt;/p>
&lt;p>By default nolog is set to false.&lt;/p></description></item><item><title>Docs: Trial</title><link>/docs/time/api/trial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/time/api/trial/</guid><description>
&lt;p>Trials are responsible for pulling together all the components of a minno-time.
In particular they are responsible for creating the interactive experience for the users.
When putting together a trial you create resources for yourself (&lt;a href="stimuli">stimuli&lt;/a>, &lt;a href="input">input listeners&lt;/a>)
and define the &lt;a href="interactions">interactions&lt;/a> that the trial will contain.&lt;/p></description></item><item><title>Docs: Scorer</title><link>/docs/time/api/scorer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/time/api/scorer/</guid><description>
&lt;p>The Scorer component of the miTime is an implementation of the D-score algorithm for computing IAT scores. The scorer allows creating an appropriate feedback message for the users, as well as logging them to the server.
In order to compute the score the trials are divided to parcels, the score for each parcel is computed and then the scores are averaged.&lt;/p>
&lt;h3 id="how-to-use">How to Use&lt;/h3>
&lt;p>Create instance of the scorer:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">scorer&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">Scorer&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Set the settings for the scorer as covered in &lt;a href="#settings-compute">compute&lt;/a>, and &lt;a href="#settings-message">messages&lt;/a>.&lt;/p>
&lt;p>The scorer has two sets of settings; &lt;a href="#settings-compute">compute&lt;/a>, and &lt;a href="#settings-message">messages&lt;/a>. The first has to do with the way the score is computed, the second allows you to customize the feedback messages that the scorer creates. Each takes an object with an assortment of properties as described below.
You can set the different settings using the following commands:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000">scorer&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addSettings&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;compute&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">computeObj&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">scorer&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addSettings&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;message&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">messageObj&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Get the score and the message from the scorer (make sure that you do this in a function that is called at the end of the miTime task, after the scores are collected);&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">DScoreObj&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">scorer&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">computeD&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="computed">computeD&lt;/h3>
&lt;p>The computeD function activates the scorer and returns an object with the score and feedback message.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">DScoreObj&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">scorer&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">computeD&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The DscoreObj has the following properties:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Property&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Dscore&lt;/td>
&lt;td>The computed score for this task (if an error was encountered the score will be an empty string).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FBMsg&lt;/td>
&lt;td>The feedback message (either a score message or an error message).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>error&lt;/td>
&lt;td>(true or false) whether an error has happened.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="settings-compute">Settings: compute&lt;/h3>
&lt;p>The compute settings affects the way that the final score is computed. In order to use it you set an object into the compute setting. The available properties are described below.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000">scorer&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addSettings&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;compute&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,{&lt;/span>
&lt;span style="color:#000">property&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">value&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Property&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>AnalyzedVar&lt;/td>
&lt;td>Which variable to analyze. Defaulted to &amp;lsquo;latency&amp;rsquo;.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ErrorVar&lt;/td>
&lt;td>Which data property marks the trial as an error trial (default: &amp;lsquo;score&amp;rsquo;). 1 is considered an error, 0 no error.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>condVar&lt;/td>
&lt;td>The variable that indicate the condition (default: &amp;lsquo;condition&amp;rsquo;).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cond1VarValues&lt;/td>
&lt;td>An array with the values of the condVar that will comprise of condition 1 in the comparison.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cond2VarValues&lt;/td>
&lt;td>An array with the values of the condVar that will comprise of condition 2 in the comparison.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>parcelVar&lt;/td>
&lt;td>A variable that indicate the name for the parcels (default: &amp;lsquo;parcel&amp;rsquo;).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>parcelValue&lt;/td>
&lt;td>An array with the values for the parcels. When building the experiment mark each trial with the parcel it belongs to, make sure that each parcel has trials that belong to both to condition 1 and condition 2.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>fastRT&lt;/td>
&lt;td>A variable that indicates the latency limit beyond which the latency is considered too fast. (also see the &lt;code>maxFastTrialsRate&lt;/code> property)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>maxFastTrialsRate&lt;/td>
&lt;td>The percentage of fast trials we are willing to tolerate. Above this % of extremely fast responses within a condition, the participant is considered too fast. If the number of trials that are too fast is too hight then an error message will be generated and saved (calculation will continue though).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>minRT&lt;/td>
&lt;td>Only trials that have latency between minRT and maxRT will be calculated.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>maxRT&lt;/td>
&lt;td>Only trials that have latency between minRT and maxRT will be calculated.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>maxErrorParcelRate&lt;/td>
&lt;td>If the % of error trials are greater than this value then an error will be generated and saved.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>errorLatency&lt;/td>
&lt;td>An object that determines the behavior of the scorer n relation to error trials. The object has three properties: &lt;code>use&lt;/code>, &lt;code>latency&lt;/code> and &lt;code>useForSTD&lt;/code>. See documentation &lt;a href="#errorLatency">below&lt;/a>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>postSettings&lt;/td>
&lt;td>An object used to determine the url and variable to send to the implicit server when any of the post methods are used. It has three properties; &lt;code>score&lt;/code>: the default key to which the score is set. &lt;code>msg&lt;/code>: the default key to which the message is set. &lt;code>url&lt;/code>: the url to which the data is sent. More about posting &lt;a href="#posting-to-the-server">here&lt;/a>.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="parcels">Parcels&lt;/h4>
&lt;p>First we set up the parcels:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000">scorer&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addSettings&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;compute&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,{&lt;/span>
&lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;span style="color:#000">parcelVar&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;parcel&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">parcelValue&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;first&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;second&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then set up the assorted trial parcels.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript"> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">parcel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;first&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">...},&lt;/span>
&lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">parcel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;second&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">...},&lt;/span>
&lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Each parcel will be computed separately, and the final score will be the average of all parcels.&lt;/p>
&lt;h4 id="errorlatency">errorLatency&lt;/h4>
&lt;p>The &lt;code>errorLatency&lt;/code> property takes an object with the following properties.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Property&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>use&lt;/td>
&lt;td>May have three values: &lt;code>latency&lt;/code> (the default): the scorer will include error trials. &lt;code>false&lt;/code>: the scorer will ignore error trials. &lt;code>penalty&lt;/code>: the scorer will add a penalty to the the latency of error trials (see penalty property).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>penalty&lt;/td>
&lt;td>The penalty that will be added to error trials if &lt;code>use&lt;/code>is set to &amp;lsquo;penalty&amp;rsquo;.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>useForSTD&lt;/td>
&lt;td>If true error trials will be used in calculations of variance.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The following examples shows a setting that penalizes mistakes by 600ms, and includes them in variance calculations.&lt;/p>
&lt;pre>&lt;code>scorer.addSettings('compute',{
....
errorLatency : {use:&amp;quot;penalty&amp;quot;, penalty:600, useForSTD:true},
....
}
&lt;/code>&lt;/pre>&lt;h3 id="settings-message">Settings: message&lt;/h3>
&lt;p>The message setting affects the feedback messages that the scorer produces. In order to use it you set an object into the message setting. The available properties are described below.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000">scorer&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addSettings&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;message&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,{&lt;/span>
&lt;span style="color:#000">property&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">value&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Property&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>manyErrors&lt;/td>
&lt;td>The feedback in case the user did not give enough correct responses.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tooFast&lt;/td>
&lt;td>The feedback in case there were too many fast trials.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>notEnough&lt;/td>
&lt;td>The feedback in case we don&amp;rsquo;t have enough correct responses to compute the score.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MessageDef&lt;/td>
&lt;td>An array of cutoff scores and messages for interpreting the results. Scores that fall between two cutoffs will be associated with the cutoff above them. Scores below the lowest cutoff will be associated with the lowest cutoff. Scores above the highest cutoff cause trouble! set your cutoff high enough so that this never happens.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>For example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript"> &lt;span style="color:#000">scorer&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addSettings&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;message&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,{&lt;/span>
&lt;span style="color:#000">manyErrors&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;There were too many errors made to determine a result.&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">tooFast&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;There were too many fast trials to determine a result.&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">notEnough&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;There were not enough trials to determine a result.&amp;#34;&lt;/span>
&lt;span style="color:#000">MessageDef&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">cut&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;-0.65&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">message&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;strong preference left&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">cut&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;-0.35&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">message&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;moderate preference left&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">cut&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;-0.15&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">message&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;slight preference left&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">cut&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;0.15&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">message&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;little to no preference&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">cut&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;0.35&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">message&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;slight preference right&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">cut&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;0.65&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">message&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;moderate preference right&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">cut&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;5&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">message&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;strong preference right&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="posting-to-the-server">Posting to the server.&lt;/h3>
&lt;p>The scorer offers two methods for posting scorer data to the server. The preferable method is using the scorer function &lt;code>dynamicPost&lt;/code>. We keep the deprecated function &lt;code>postToServer&lt;/code> only for backward compatibility.&lt;/p>
&lt;p>You can and should set the post settings in the &lt;code>postSettings&lt;/code> property of the &lt;a href="#settings-compute">compute setting&lt;/a>. Most notably, that is where you set the target URL.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#000">scorer&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">addSettings&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;compute&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,{&lt;/span>
&lt;span style="color:#000">postSettings&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">score&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;score&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">msg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;feedback&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">url&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/implicit/scorer&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="dynamicpost">dynamicPost&lt;/h4>
&lt;p>This function takes an object, jsonifies it, and sends it to the server. It returns a jQuery promise so you can do anything that you like after it finishes.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8f5902;font-style:italic">// Compute score
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">DScoreObj&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">scorer&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">computeD&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Post to the server
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">scorer&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dynamicPost&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span>
&lt;span style="color:#000">score&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">DScoreObj&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">DScore&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">feedback&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">DScoreObj&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">FBMsg&lt;/span>
&lt;span style="color:#000;font-weight:bold">}).&lt;/span>&lt;span style="color:#000">always&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">function&lt;/span>&lt;span style="color:#000;font-weight:bold">(){&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// always run the following code, even if the post failed.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">top&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">location&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">href&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/my/next/url/&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="posttoserver">postToServer&lt;/h4>
&lt;p>This method is deprecated. Use &lt;a href="#dynamicpost">dynamicPost&lt;/a> instead.&lt;/p>
&lt;p>If you need to use it anyway, The syntax is like so:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8f5902;font-style:italic">// Compute score
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">DScoreObj&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">scorer&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">computeD&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">score&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">DScoreObj&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">DScore&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">feedback&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">DScoreObj&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">FBMsg&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">score&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;score&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">msg&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;feedback&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// post to server
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">scorer&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">postToServer&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">score&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">scoreKey&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">msgKey&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Where the arguments are as follows:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Argument&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>score&lt;/td>
&lt;td>The task score (required).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>msg&lt;/td>
&lt;td>The feedback message (required).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>scoreKey&lt;/td>
&lt;td>The key for the score data (optional, uses the &lt;code>postSettings&lt;/code> property &lt;code>score&lt;/code> by default).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>msgKey&lt;/td>
&lt;td>The key for the message data (optional, uses the &lt;code>postSettings&lt;/code> property &lt;code>msg&lt;/code> by default).&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item></channel></rss>